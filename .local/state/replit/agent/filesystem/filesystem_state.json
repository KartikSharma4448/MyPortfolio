{"file_contents":{"client/src/pages/projects.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ExternalLink, Github, Loader2, FolderOpen } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport type { Project } from \"@shared/schema\";\n\nexport default function Projects() {\n  const { data: projects, isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const featuredProjects = projects?.filter((p) => p.featured === \"true\");\n  const otherProjects = projects?.filter((p) => p.featured !== \"true\");\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Projects</h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Building innovative solutions and learning through hands-on\n            development\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : projects && projects.length > 0 ? (\n          <>\n            {/* Featured Projects */}\n            {featuredProjects && featuredProjects.length > 0 && (\n              <section className=\"mb-16\">\n                <h2 className=\"text-3xl font-bold mb-8\">Featured Projects</h2>\n                <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\n                  {featuredProjects.map((project) => (\n                    <Card\n                      key={project.id}\n                      className=\"hover-elevate transition-transform hover:-translate-y-1 overflow-hidden\"\n                      data-testid={`project-featured-${project.id}`}\n                    >\n                      {project.imageUrl && (\n                        <div className=\"w-full h-48 bg-gradient-to-br from-primary/20 to-chart-2/20 flex items-center justify-center\">\n                          <FolderOpen className=\"h-16 w-16 text-muted-foreground/30\" />\n                        </div>\n                      )}\n                      <CardHeader>\n                        <div className=\"flex items-start justify-between gap-4\">\n                          <CardTitle className=\"text-2xl\">\n                            {project.title}\n                          </CardTitle>\n                          <Badge className=\"bg-chart-2 hover:bg-chart-2\">\n                            Featured\n                          </Badge>\n                        </div>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <p className=\"text-muted-foreground leading-relaxed\">\n                          {project.description}\n                        </p>\n\n                        <div className=\"flex flex-wrap gap-2\">\n                          {project.technologies.map((tech, idx) => (\n                            <Badge key={idx} variant=\"secondary\">\n                              {tech}\n                            </Badge>\n                          ))}\n                        </div>\n\n                        <div className=\"flex gap-3 pt-2\">\n                          {project.liveUrl && (\n                            <a\n                              href={project.liveUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              data-testid={`link-live-${project.id}`}\n                            >\n                              <Button size=\"sm\">\n                                <ExternalLink className=\"h-4 w-4 mr-2\" />\n                                Live Demo\n                              </Button>\n                            </a>\n                          )}\n                          {project.githubUrl && (\n                            <a\n                              href={project.githubUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              data-testid={`link-github-${project.id}`}\n                            >\n                              <Button size=\"sm\" variant=\"outline\">\n                                <Github className=\"h-4 w-4 mr-2\" />\n                                GitHub\n                              </Button>\n                            </a>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </section>\n            )}\n\n            {/* Other Projects */}\n            {otherProjects && otherProjects.length > 0 && (\n              <section>\n                <h2 className=\"text-3xl font-bold mb-8\">More Projects</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                  {otherProjects.map((project) => (\n                    <Card\n                      key={project.id}\n                      className=\"hover-elevate transition-transform hover:-translate-y-1\"\n                      data-testid={`project-${project.id}`}\n                    >\n                      <CardHeader>\n                        <CardTitle className=\"flex items-start gap-3\">\n                          <FolderOpen className=\"h-5 w-5 text-primary flex-shrink-0 mt-1\" />\n                          <span className=\"leading-tight\">{project.title}</span>\n                        </CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"space-y-4\">\n                        <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                          {project.description}\n                        </p>\n\n                        <div className=\"flex flex-wrap gap-2\">\n                          {project.technologies.slice(0, 4).map((tech, idx) => (\n                            <Badge\n                              key={idx}\n                              variant=\"outline\"\n                              className=\"text-xs\"\n                            >\n                              {tech}\n                            </Badge>\n                          ))}\n                        </div>\n\n                        <div className=\"flex gap-2\">\n                          {project.liveUrl && (\n                            <a\n                              href={project.liveUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              data-testid={`link-live-${project.id}`}\n                            >\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-8 w-8 hover-elevate active-elevate-2\"\n                              >\n                                <ExternalLink className=\"h-4 w-4\" />\n                              </Button>\n                            </a>\n                          )}\n                          {project.githubUrl && (\n                            <a\n                              href={project.githubUrl}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              data-testid={`link-github-${project.id}`}\n                            >\n                              <Button\n                                size=\"icon\"\n                                variant=\"ghost\"\n                                className=\"h-8 w-8 hover-elevate active-elevate-2\"\n                              >\n                                <Github className=\"h-4 w-4\" />\n                              </Button>\n                            </a>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </section>\n            )}\n          </>\n        ) : (\n          <div className=\"text-center py-20\">\n            <FolderOpen className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n            <p className=\"text-muted-foreground\">No projects added yet.</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8407},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  // Whitespace-nowrap: Badges should never wrap.\n  \"whitespace-nowrap inline-flex items-center rounded-md border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\" +\n  \" hover-elevate \" ,\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground shadow-xs\",\n        secondary: \"border-transparent bg-secondary text-secondary-foreground\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground shadow-xs\",\n\n        outline: \" border [border-color:var(--badge-outline)] shadow-xs\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  },\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  );\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1202},"client/src/pages/admin.tsx":{"content":"import { Link, useLocation } from \"wouter\";\nimport { \n  LayoutDashboard, \n  FolderOpen, \n  Award, \n  Code, \n  Briefcase,\n  Share2,\n  MessageSquare,\n  BookOpen,\n  LogOut\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport type { Project, Certificate, Skill, Service, SocialLink, BlogPost } from \"@shared/schema\";\n\nexport default function Admin() {\n  const [location] = useLocation();\n  const { logoutMutation } = useAuth();\n\n  const { data: projects } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const { data: certificates } = useQuery<Certificate[]>({\n    queryKey: [\"/api/certificates\"],\n  });\n\n  const { data: skills } = useQuery<Skill[]>({\n    queryKey: [\"/api/skills\"],\n  });\n\n  const { data: services } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const { data: socialLinks } = useQuery<SocialLink[]>({\n    queryKey: [\"/api/social-links\"],\n  });\n\n  const { data: blogPosts } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog-posts\"],\n  });\n\n  const stats = [\n    {\n      title: \"Projects\",\n      count: projects?.length || 0,\n      icon: FolderOpen,\n      color: \"text-primary\",\n      link: \"/admin/projects\",\n    },\n    {\n      title: \"Certificates\",\n      count: certificates?.length || 0,\n      icon: Award,\n      color: \"text-chart-2\",\n      link: \"/admin/certificates\",\n    },\n    {\n      title: \"Skills\",\n      count: skills?.length || 0,\n      icon: Code,\n      color: \"text-chart-3\",\n      link: \"/admin/skills\",\n    },\n    {\n      title: \"Services\",\n      count: services?.length || 0,\n      icon: Briefcase,\n      color: \"text-chart-4\",\n      link: \"/admin/services\",\n    },\n    {\n      title: \"Social Links\",\n      count: socialLinks?.length || 0,\n      icon: Share2,\n      color: \"text-chart-1\",\n      link: \"/admin/social-links\",\n    },\n    {\n      title: \"Blog Posts\",\n      count: blogPosts?.length || 0,\n      icon: BookOpen,\n      color: \"text-chart-5\",\n      link: \"/admin/blog\",\n    },\n  ];\n\n  const quickActions = [\n    { label: \"Add Project\", href: \"/admin/projects\", icon: FolderOpen },\n    { label: \"Add Certificate\", href: \"/admin/certificates\", icon: Award },\n    { label: \"Add Skill\", href: \"/admin/skills\", icon: Code },\n    { label: \"Add Service\", href: \"/admin/services\", icon: Briefcase },\n    { label: \"Add Social Link\", href: \"/admin/social-links\", icon: Share2 },\n    { label: \"Add Blog Post\", href: \"/admin/blog\", icon: BookOpen },\n  ];\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        {/* Header */}\n        <div className=\"mb-12\">\n          <div className=\"flex items-center justify-between mb-4\">\n            <div className=\"flex items-center gap-3\">\n              <LayoutDashboard className=\"h-8 w-8 text-primary\" />\n              <h1 className=\"text-4xl font-bold\">Admin Dashboard</h1>\n            </div>\n            <Button\n              variant=\"outline\"\n              onClick={() => logoutMutation.mutate()}\n              disabled={logoutMutation.isPending}\n              data-testid=\"button-logout\"\n            >\n              <LogOut className=\"h-4 w-4 mr-2\" />\n              {logoutMutation.isPending ? \"Logging out...\" : \"Logout\"}\n            </Button>\n          </div>\n          <p className=\"text-muted-foreground text-lg\">\n            Manage your portfolio content\n          </p>\n        </div>\n\n        {/* Stats Grid */}\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-5 gap-6 mb-12\">\n          {stats.map((stat) => {\n            const Icon = stat.icon;\n            return (\n              <Link key={stat.title} href={stat.link}>\n                <Card className=\"hover-elevate transition-transform hover:-translate-y-1 cursor-pointer\">\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center justify-between mb-4\">\n                      <Icon className={`h-8 w-8 ${stat.color}`} />\n                      <Badge variant=\"secondary\" className=\"text-xl font-bold\">\n                        {stat.count}\n                      </Badge>\n                    </div>\n                    <h3 className=\"font-semibold text-lg\">{stat.title}</h3>\n                  </CardContent>\n                </Card>\n              </Link>\n            );\n          })}\n        </div>\n\n        {/* Quick Actions */}\n        <Card>\n          <CardHeader>\n            <CardTitle>Quick Actions</CardTitle>\n          </CardHeader>\n          <CardContent>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n              {quickActions.map((action) => {\n                const Icon = action.icon;\n                return (\n                  <Link key={action.label} href={action.href}>\n                    <Button\n                      variant=\"outline\"\n                      className=\"w-full justify-start gap-3 h-auto py-4 hover-elevate\"\n                      data-testid={`button-${action.label.toLowerCase().replace(\" \", \"-\")}`}\n                    >\n                      <Icon className=\"h-5 w-5\" />\n                      {action.label}\n                    </Button>\n                  </Link>\n                );\n              })}\n            </div>\n          </CardContent>\n        </Card>\n\n        {/* Navigation to Management Pages */}\n        <div className=\"mt-12 grid grid-cols-1 md:grid-cols-2 gap-6\">\n          <Card className=\"hover-elevate transition-transform hover:-translate-y-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <FolderOpen className=\"h-5 w-5 text-primary\" />\n                Content Management\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/admin/projects\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-manage-projects\"\n                >\n                  Manage Projects\n                </Button>\n              </Link>\n              <Link href=\"/admin/certificates\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-manage-certificates\"\n                >\n                  Manage Certificates\n                </Button>\n              </Link>\n              <Link href=\"/admin/skills\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-manage-skills\"\n                >\n                  Manage Skills\n                </Button>\n              </Link>\n              <Link href=\"/admin/blog\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-manage-blog\"\n                >\n                  Manage Blog\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n\n          <Card className=\"hover-elevate transition-transform hover:-translate-y-1\">\n            <CardHeader>\n              <CardTitle className=\"flex items-center gap-2\">\n                <Briefcase className=\"h-5 w-5 text-chart-2\" />\n                Other Settings\n              </CardTitle>\n            </CardHeader>\n            <CardContent className=\"space-y-3\">\n              <Link href=\"/admin/services\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-manage-services\"\n                >\n                  Manage Services\n                </Button>\n              </Link>\n              <Link href=\"/admin/social-links\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-manage-social\"\n                >\n                  Manage Social Links\n                </Button>\n              </Link>\n              <Link href=\"/\">\n                <Button\n                  variant=\"ghost\"\n                  className=\"w-full justify-start\"\n                  data-testid=\"link-view-site\"\n                >\n                  View Public Site\n                </Button>\n              </Link>\n            </CardContent>\n          </Card>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8617},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"design_guidelines.md":{"content":"# Design Guidelines: Kartik Sharma Portfolio Website\n\n## Design Approach\n\n**Selected Approach:** Reference-Based with Modern Portfolio Aesthetics\n\n**Justification:** This portfolio requires strong visual appeal to showcase technical achievements and projects effectively. Drawing inspiration from:\n- **Linear** for clean, modern typography and subtle animations\n- **Stripe** for professional color restraint and trust-building design\n- **Notion** for content organization and card-based layouts\n- **Modern Developer Portfolios** (GitHub profiles, Dribbble) for project showcasing\n\n**Core Principles:**\n1. Professional credibility through clean, sophisticated design\n2. Visual hierarchy emphasizing achievements and projects\n3. Subtle, purposeful animations that enhance (not distract)\n4. Trust-building through organized, scannable content\n5. Personal branding while maintaining modern standards\n\n## Color Palette\n\n**Dark Mode (Primary):**\n- Background: 222 15% 8% (deep charcoal)\n- Surface: 222 13% 12% (elevated surfaces)\n- Surface Elevated: 222 12% 16% (cards, modals)\n- Primary: 217 91% 60% (professional blue - main CTAs)\n- Primary Hover: 217 91% 55%\n- Accent: 142 71% 45% (success green - achievements, certifications)\n- Text Primary: 0 0% 98%\n- Text Secondary: 0 0% 71%\n- Border: 222 10% 20%\n\n**Light Mode:**\n- Background: 0 0% 100%\n- Surface: 0 0% 98%\n- Surface Elevated: 0 0% 96%\n- Primary: 217 91% 50%\n- Primary Hover: 217 91% 45%\n- Accent: 142 71% 40%\n- Text Primary: 222 15% 12%\n- Text Secondary: 222 8% 45%\n- Border: 0 0% 89%\n\n**Semantic Colors:**\n- Warning: 38 92% 50%\n- Error: 0 72% 51%\n- Info: 199 89% 48%\n\n## Typography\n\n**Font Families:**\n- **Primary (Headings):** 'Inter', system-ui, sans-serif (via Google Fonts CDN)\n- **Secondary (Body):** 'Inter', system-ui, sans-serif\n- **Mono (Code/Technical):** 'JetBrains Mono', 'Fira Code', monospace (via Google Fonts CDN)\n\n**Type Scale:**\n- Hero Title: text-6xl md:text-7xl lg:text-8xl, font-bold, tracking-tight\n- Section Headers: text-4xl md:text-5xl, font-bold, tracking-tight\n- Subsection Headers: text-2xl md:text-3xl, font-semibold\n- Card Titles: text-xl, font-semibold\n- Body Large: text-lg, font-normal, leading-relaxed\n- Body: text-base, font-normal, leading-relaxed\n- Small/Meta: text-sm, text-secondary\n- Tiny/Labels: text-xs, uppercase, tracking-wider\n\n**Line Heights:**\n- Headings: leading-tight (1.2)\n- Body: leading-relaxed (1.75)\n- Code: leading-normal (1.5)\n\n## Layout System\n\n**Spacing Primitives:**\nPrimary spacing units: 4, 8, 12, 16, 20, 24, 32 (Tailwind scale)\n- Micro spacing (within components): p-4, gap-2, gap-4\n- Component spacing: p-6, p-8, gap-6\n- Section padding: py-16 md:py-20 lg:py-24, px-4 md:px-6 lg:px-8\n- Major spacing: py-32, mb-24\n\n**Container Strategy:**\n- Full-width sections: w-full with inner max-w-7xl mx-auto\n- Content sections: max-w-6xl mx-auto\n- Text content: max-w-3xl for readability\n- Forms: max-w-2xl\n\n**Grid System:**\n- Project cards: grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\n- Certification cards: grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-6\n- Skills grid: grid grid-cols-2 md:grid-cols-3 lg:grid-cols-4 gap-4\n- Service offerings: grid grid-cols-1 md:grid-cols-2 gap-6\n\n## Component Library\n\n### Navigation\n**Sticky Header:** Glass-morphism effect with backdrop-blur, subtle border-bottom\n- Logo/Name on left (text-xl font-bold)\n- Nav links center (hidden on mobile, hamburger menu)\n- CTA button right (primary color)\n- Mobile: Full-screen overlay menu with smooth slide-in\n\n### Hero Section (Landing Page)\n**Layout:** Full viewport height (min-h-screen) with centered content\n- Large gradient background (subtle animated gradient)\n- Profile image: Circular, 200px, with subtle glow effect\n- Name: text-7xl, gradient text effect\n- Title/Tagline: text-2xl, text-secondary\n- CTA buttons: Primary + Secondary (outline)\n- Scroll indicator: Animated down arrow at bottom\n\n**Background:** Animated gradient mesh or particle effect (canvas-based, subtle)\n\n### About Section\n**Two-column layout:** \n- Left: Professional photo (if available) or illustration\n- Right: Bio text, education highlight cards\n- Education cards: University logo placeholder, degree, CGPA with badge styling\n- Work experience timeline with connecting lines\n\n### Achievements/Certificates Section\n**Masonry-style grid** or uniform card grid\n- Certificate card: Icon (ribbon/badge), title, issuing org, date, \"View Credential\" link\n- Filter tabs: All, Microsoft, Google, Cloud, Data Analytics\n- Hover effect: Lift and glow\n- Badge count: \"16+ Professional Certifications\" prominently displayed\n\n### Skills Section\n**Visual hierarchy:**\n- Category grouping: Technical Skills, Tools & Technologies, Soft Skills\n- Skill pills: Rounded badges with icon + label\n- Proficiency indicators: Subtle progress bars or dot ratings\n- Interactive: Hover reveals description/usage\n\n### Projects Section\n**Featured project cards (HOPE-PAWS highlighted):**\n- Large card for featured project with screenshot placeholder\n- Project image/mockup area\n- Title, tech stack tags, description\n- Links: Live Demo, GitHub (with icons)\n- Additional projects in smaller grid\n\n### Services Section\n**Icon-driven cards:**\n- Service icon (from Heroicons or Font Awesome)\n- Service title, brief description\n- Grid layout: 3 columns on desktop, stacked mobile\n\n### Contact Section\n**Split layout:**\n- Left: Contact form (Name, Email, Message fields, Send button)\n- Right: Contact info cards (Email, LinkedIn, Location with icons)\n- Form validation with inline error states\n\n### Social Links Page\n**Centralized link hub (Linktree-style):**\n- Centered single-column layout (max-w-2xl)\n- Profile header with image and bio\n- Large clickable link cards: LinkedIn, GitHub, Email, Portfolio, Instagram (if applicable)\n- Each card: Icon, platform name, handle/description, external link indicator\n- Subtle hover animations (scale, glow)\n\n### Admin Panel\n**Dashboard layout:**\n- Sidebar navigation: Dashboard, Projects, Certificates, Skills, Services\n- Main content area with data tables\n- Add/Edit forms in modals or separate views\n- Action buttons: Edit (blue), Delete (red), Add New (green)\n- Confirmation dialogs for destructive actions\n\n## Animations\n\n**Philosophy:** Subtle, purposeful, performance-optimized\n\n**Entrance Animations:**\n- Sections: Fade-in with slight upward translate (intersection observer)\n- Cards: Staggered fade-in (50ms delay between items)\n- Hero: Text reveals with character-by-character fade (subtle)\n\n**Interaction Animations:**\n- Buttons: Scale(0.98) on active, smooth color transitions\n- Cards: Hover lift (translateY(-4px)), shadow increase, border glow\n- Links: Underline expand on hover\n- Navigation: Smooth scroll with easing\n\n**Scroll Effects:**\n- Parallax on hero background (very subtle, 0.5 ratio)\n- Sticky header with blur backdrop on scroll\n- Progress indicator showing page completion\n\n**Prohibited:**\n- Auto-playing carousels\n- Excessive parallax\n- Bouncing elements\n- Spinning loaders (use skeleton screens)\n\n## Images\n\n**Hero Section:**\n- **Large Background Image:** Abstract tech/code pattern or gradient mesh (1920x1080), low opacity overlay\n- **Profile Photo:** Professional headshot, circular crop, 300x300px, centered\n\n**About Section:**\n- Professional workspace photo or illustration (800x600)\n\n**Projects Section:**\n- **HOPE-PAWS:** Screenshot or mockup of the platform interface (1200x800)\n- Project thumbnails for additional projects (600x400 each)\n\n**Placeholders:** Use subtle gray backgrounds with icon indicators until real images are added\n\n## SEO Optimization\n\n**Meta Tags (Every Page):**\n```\nTitle: \"Kartik Sharma | BCA Student & Aspiring Software Developer\"\nDescription: \"Portfolio of Kartik Sharma - BCA student passionate about software development, web design, and cloud computing. View projects, certifications, and services.\"\nKeywords: software developer, BCA student, web development, Jaipur developer\n```\n\n**Structured Data (JSON-LD):**\n- Person schema for about/home\n- WebSite schema with sitelinks searchbox\n- BreadcrumbList for navigation\n\n**Technical SEO:**\n- Semantic HTML5 (header, nav, main, section, article, footer)\n- Heading hierarchy (single h1 per page)\n- Alt text for all images describing content\n- Descriptive link text (avoid \"click here\")\n- Mobile-first responsive design\n- Fast loading (lazy load images, minify CSS)\n\n## Accessibility\n\n- Color contrast ratios: 4.5:1 minimum for normal text\n- Focus indicators on all interactive elements (2px outline, primary color)\n- Skip to main content link\n- ARIA labels for icon-only buttons\n- Keyboard navigation support\n- Form labels and error messages\n\n## Responsive Breakpoints\n\n- Mobile: < 768px (single column, stacked layout)\n- Tablet: 768px - 1024px (2-column grids)\n- Desktop: > 1024px (multi-column, full layouts)\n- Large Desktop: > 1440px (max-width constraints)\n\nThis design system creates a professional, modern portfolio that showcases Kartik's achievements while maintaining credibility and trustworthiness through clean, sophisticated design choices.","size_bytes":9068},"client/src/components/theme-toggle.tsx":{"content":"import { Moon, Sun } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { useTheme } from \"./theme-provider\";\n\nexport function ThemeToggle() {\n  const { theme, toggleTheme } = useTheme();\n\n  return (\n    <Button\n      variant=\"ghost\"\n      size=\"icon\"\n      onClick={toggleTheme}\n      data-testid=\"button-theme-toggle\"\n      className=\"hover-elevate active-elevate-2\"\n    >\n      {theme === \"light\" ? (\n        <Moon className=\"h-5 w-5\" />\n      ) : (\n        <Sun className=\"h-5 w-5\" />\n      )}\n      <span className=\"sr-only\">Toggle theme</span>\n    </Button>\n  );\n}\n","size_bytes":597},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\n\ndeclare module 'http' {\n  interface IncomingMessage {\n    rawBody: unknown\n  }\n}\napp.use(express.json({\n  verify: (req, _res, buf) => {\n    req.rawBody = buf;\n  }\n}));\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2210},"client/src/App.tsx":{"content":"import { useEffect } from \"react\";\nimport { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/theme-provider\";\nimport { AuthProvider } from \"@/hooks/use-auth\";\nimport { ProtectedRoute } from \"@/lib/protected-route\";\nimport { Navbar } from \"@/components/navbar\";\nimport { Footer } from \"@/components/footer\";\nimport { initGA } from \"./lib/analytics\";\nimport { useAnalytics } from \"./hooks/use-analytics\";\nimport Home from \"@/pages/home\";\nimport About from \"@/pages/about\";\nimport Achievements from \"@/pages/achievements\";\nimport Projects from \"@/pages/projects\";\nimport Services from \"@/pages/services\";\nimport Contact from \"@/pages/contact\";\nimport SocialLinks from \"@/pages/social-links\";\nimport Blog from \"@/pages/blog\";\nimport BlogPost from \"@/pages/blog-post\";\nimport AuthPage from \"@/pages/auth\";\nimport Admin from \"@/pages/admin\";\nimport AdminProjects from \"@/pages/admin-projects\";\nimport AdminCertificates from \"@/pages/admin-certificates\";\nimport AdminSkills from \"@/pages/admin-skills\";\nimport AdminServices from \"@/pages/admin-services\";\nimport AdminSocialLinks from \"@/pages/admin-social-links\";\nimport AdminBlog from \"@/pages/admin-blog\";\nimport NotFound from \"@/pages/not-found\";\n\nfunction Router() {\n  useAnalytics();\n  \n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/achievements\" component={Achievements} />\n      <Route path=\"/projects\" component={Projects} />\n      <Route path=\"/services\" component={Services} />\n      <Route path=\"/blog\" component={Blog} />\n      <Route path=\"/blog/:slug\" component={BlogPost} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/social-links\" component={SocialLinks} />\n      <Route path=\"/auth\" component={AuthPage} />\n      <ProtectedRoute path=\"/admin\" component={Admin} />\n      <ProtectedRoute path=\"/admin/projects\" component={AdminProjects} />\n      <ProtectedRoute path=\"/admin/certificates\" component={AdminCertificates} />\n      <ProtectedRoute path=\"/admin/skills\" component={AdminSkills} />\n      <ProtectedRoute path=\"/admin/services\" component={AdminServices} />\n      <ProtectedRoute path=\"/admin/social-links\" component={AdminSocialLinks} />\n      <ProtectedRoute path=\"/admin/blog\" component={AdminBlog} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  useEffect(() => {\n    if (!import.meta.env.VITE_GA_MEASUREMENT_ID) {\n      console.warn('Missing required Google Analytics key: VITE_GA_MEASUREMENT_ID');\n    } else {\n      initGA();\n    }\n  }, []);\n\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider defaultTheme=\"dark\">\n        <AuthProvider>\n          <TooltipProvider>\n            <div className=\"min-h-screen flex flex-col\">\n              <Navbar />\n              <main className=\"flex-1\">\n                <Router />\n              </main>\n              <Footer />\n            </div>\n            <Toaster />\n          </TooltipProvider>\n        </AuthProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":3333},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  // YEH NAYI WALI LINE HAI\n  const distPath = path.resolve(import.meta.dirname, \"..\", \"dist/public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2302},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    // h-9 to match icon buttons and default buttons.\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-9 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":844},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/pages/auth.tsx":{"content":"import { useState } from \"react\";\nimport { useAuth } from \"@/hooks/use-auth\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Redirect } from \"wouter\";\nimport { Lock, User, Shield } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Card, CardContent, CardHeader, CardTitle, CardDescription } from \"@/components/ui/card\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { insertUserSchema, type InsertUser } from \"@shared/schema\";\nimport { z } from \"zod\";\n\nconst registrationSchema = insertUserSchema.extend({\n  registrationSecret: z.string().min(1, \"Registration secret is required\"),\n});\n\ntype RegistrationData = z.infer<typeof registrationSchema>;\n\nexport default function AuthPage() {\n  const { user, loginMutation, registerMutation } = useAuth();\n  const [isLogin, setIsLogin] = useState(true);\n\n  const form = useForm<RegistrationData>({\n    resolver: zodResolver(isLogin ? insertUserSchema : registrationSchema),\n    defaultValues: {\n      username: \"\",\n      password: \"\",\n      registrationSecret: \"\",\n    },\n  });\n\n  if (user) {\n    return <Redirect to=\"/admin\" />;\n  }\n\n  const onSubmit = (data: RegistrationData) => {\n    if (isLogin) {\n      loginMutation.mutate({ username: data.username, password: data.password });\n    } else {\n      registerMutation.mutate(data);\n    }\n  };\n\n  const isPending = loginMutation.isPending || registerMutation.isPending;\n\n  return (\n    <div className=\"min-h-screen flex items-center justify-center p-4\">\n      <div className=\"w-full max-w-5xl grid md:grid-cols-2 gap-8 items-center\">\n        {/* Login Form */}\n        <div>\n          <Card>\n            <CardHeader>\n              <CardTitle className=\"text-2xl\">\n                {isLogin ? \"Admin Login\" : \"Create Admin Account\"}\n              </CardTitle>\n              <CardDescription>\n                {isLogin \n                  ? \"Sign in to access the admin dashboard\"\n                  : \"Register a new admin account\"}\n              </CardDescription>\n            </CardHeader>\n            <CardContent>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"username\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Username</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <User className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              {...field}\n                              placeholder=\"Enter your username\"\n                              className=\"pl-9\"\n                              data-testid=\"input-username\"\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"password\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Password</FormLabel>\n                        <FormControl>\n                          <div className=\"relative\">\n                            <Lock className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                            <Input\n                              {...field}\n                              type=\"password\"\n                              placeholder=\"Enter your password\"\n                              className=\"pl-9\"\n                              data-testid=\"input-password\"\n                            />\n                          </div>\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  {!isLogin && (\n                    <FormField\n                      control={form.control}\n                      name=\"registrationSecret\"\n                      render={({ field }) => (\n                        <FormItem>\n                          <FormLabel>Registration Secret</FormLabel>\n                          <FormControl>\n                            <div className=\"relative\">\n                              <Shield className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                              <Input\n                                {...field}\n                                type=\"password\"\n                                placeholder=\"Enter registration secret\"\n                                className=\"pl-9\"\n                                data-testid=\"input-registration-secret\"\n                              />\n                            </div>\n                          </FormControl>\n                          <FormMessage />\n                        </FormItem>\n                      )}\n                    />\n                  )}\n\n                  <Button\n                    type=\"submit\"\n                    className=\"w-full\"\n                    disabled={isPending}\n                    data-testid={isLogin ? \"button-login\" : \"button-register\"}\n                  >\n                    {isPending ? \"Please wait...\" : isLogin ? \"Sign In\" : \"Create Account\"}\n                  </Button>\n\n                  <div className=\"text-center text-sm\">\n                    <button\n                      type=\"button\"\n                      onClick={() => {\n                        setIsLogin(!isLogin);\n                        form.reset();\n                      }}\n                      className=\"text-primary hover:underline\"\n                      data-testid=\"button-toggle-mode\"\n                    >\n                      {isLogin\n                        ? \"Need an account? Register\"\n                        : \"Already have an account? Sign in\"}\n                    </button>\n                  </div>\n                </form>\n              </Form>\n            </CardContent>\n          </Card>\n        </div>\n\n        {/* Hero Section */}\n        <div className=\"hidden md:block\">\n          <div className=\"space-y-6\">\n            <div className=\"flex items-center gap-3\">\n              <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center\">\n                <Shield className=\"h-6 w-6 text-primary\" />\n              </div>\n              <div>\n                <h2 className=\"text-3xl font-bold\">Admin Access</h2>\n                <p className=\"text-muted-foreground\">Secure portfolio management</p>\n              </div>\n            </div>\n\n            <div className=\"space-y-4\">\n              <div className=\"p-4 rounded-lg bg-muted/50\">\n                <h3 className=\"font-semibold mb-2\">Manage Content</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Add, edit, and organize your projects, certificates, skills, and services from one central dashboard.\n                </p>\n              </div>\n\n              <div className=\"p-4 rounded-lg bg-muted/50\">\n                <h3 className=\"font-semibold mb-2\">Secure Access</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Your admin panel is protected with authentication to ensure only authorized users can make changes.\n                </p>\n              </div>\n\n              <div className=\"p-4 rounded-lg bg-muted/50\">\n                <h3 className=\"font-semibold mb-2\">Real-time Updates</h3>\n                <p className=\"text-sm text-muted-foreground\">\n                  Changes you make are immediately reflected on your public portfolio for a seamless experience.\n                </p>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":8143},"client/src/pages/admin-projects.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Pencil, Trash2, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertProjectSchema, type InsertProject, type Project } from \"@shared/schema\";\n\nexport default function AdminProjects() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingProject, setEditingProject] = useState<Project | null>(null);\n  const [techInput, setTechInput] = useState(\"\");\n\n  const { data: projects, isLoading } = useQuery<Project[]>({\n    queryKey: [\"/api/projects\"],\n  });\n\n  const form = useForm<InsertProject>({\n    resolver: zodResolver(insertProjectSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      technologies: [],\n      liveUrl: \"\",\n      githubUrl: \"\",\n      imageUrl: \"\",\n      featured: \"false\",\n      order: \"0\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertProject) => {\n      return await apiRequest(\"POST\", \"/api/projects\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({ title: \"Project created successfully\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertProject }) => {\n      return await apiRequest(\"PATCH\", `/api/projects/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({ title: \"Project updated successfully\" });\n      setDialogOpen(false);\n      setEditingProject(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/projects/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/projects\"] });\n      toast({ title: \"Project deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (project: Project) => {\n    setEditingProject(project);\n    form.reset({\n      title: project.title,\n      description: project.description,\n      technologies: project.technologies,\n      liveUrl: project.liveUrl || \"\",\n      githubUrl: project.githubUrl || \"\",\n      imageUrl: project.imageUrl || \"\",\n      featured: project.featured,\n      order: project.order,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertProject) => {\n    if (editingProject) {\n      updateMutation.mutate({ id: editingProject.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const addTechnology = () => {\n    if (techInput.trim()) {\n      const currentTech = form.getValues(\"technologies\") || [];\n      form.setValue(\"technologies\", [...currentTech, techInput.trim()]);\n      setTechInput(\"\");\n    }\n  };\n\n  const removeTechnology = (index: number) => {\n    const currentTech = form.getValues(\"technologies\") || [];\n    form.setValue(\n      \"technologies\",\n      currentTech.filter((_, i) => i !== index)\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <Link href=\"/admin\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-2\" data-testid=\"link-back\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-4xl font-bold\">Manage Projects</h1>\n          </div>\n\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => { setEditingProject(null); form.reset(); }} data-testid=\"button-add-project\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Project\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingProject ? \"Edit Project\" : \"Add New Project\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} className=\"min-h-24\" data-testid=\"input-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"technologies\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Technologies</FormLabel>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            value={techInput}\n                            onChange={(e) => setTechInput(e.target.value)}\n                            placeholder=\"Add technology\"\n                            onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addTechnology())}\n                            data-testid=\"input-technology\"\n                          />\n                          <Button type=\"button\" onClick={addTechnology} data-testid=\"button-add-tech\">\n                            Add\n                          </Button>\n                        </div>\n                        <div className=\"flex flex-wrap gap-2 mt-2\">\n                          {field.value?.map((tech, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {tech}\n                              <button\n                                type=\"button\"\n                                onClick={() => removeTechnology(index)}\n                                className=\"ml-2\"\n                                data-testid={`button-remove-tech-${index}`}\n                              >\n                                ×\n                              </button>\n                            </Badge>\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"liveUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Live URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://...\" data-testid=\"input-live-url\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"githubUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>GitHub URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://github.com/...\" data-testid=\"input-github-url\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"featured\"\n                    render={({ field }) => (\n                      <FormItem className=\"flex items-center justify-between rounded-lg border p-4\">\n                        <div>\n                          <FormLabel>Featured Project</FormLabel>\n                          <p className=\"text-sm text-muted-foreground\">\n                            Display this project prominently\n                          </p>\n                        </div>\n                        <FormControl>\n                          <Switch\n                            checked={field.value === \"true\"}\n                            onCheckedChange={(checked) => field.onChange(checked ? \"true\" : \"false\")}\n                            data-testid=\"switch-featured\"\n                          />\n                        </FormControl>\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save Project\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        ) : projects && projects.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {projects.map((project) => (\n              <Card key={project.id} data-testid={`project-card-${project.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"flex items-start justify-between gap-2\">\n                    <span className=\"flex-1\">{project.title}</span>\n                    {project.featured === \"true\" && (\n                      <Badge className=\"bg-chart-2\">Featured</Badge>\n                    )}\n                  </CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                    {project.description}\n                  </p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {project.technologies.slice(0, 3).map((tech, idx) => (\n                      <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                        {tech}\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(project)}\n                      data-testid={`button-edit-${project.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => deleteMutation.mutate(project.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${project.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground\">No projects yet. Add your first one!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12870},"client/src/components/navbar.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { Menu, X } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ThemeToggle } from \"./theme-toggle\";\nimport { useAuth } from \"@/hooks/use-auth\";\n\nexport function Navbar() {\n  const [location] = useLocation();\n  const [isScrolled, setIsScrolled] = useState(false);\n  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false);\n  const { user } = useAuth();\n\n  useEffect(() => {\n    const handleScroll = () => {\n      setIsScrolled(window.scrollY > 20);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    return () => window.removeEventListener(\"scroll\", handleScroll);\n  }, []);\n\n  const navLinks = [\n    { href: \"/\", label: \"Home\" },\n    { href: \"/about\", label: \"About\" },\n    { href: \"/achievements\", label: \"Achievements\" },\n    { href: \"/projects\", label: \"Projects\" },\n    { href: \"/services\", label: \"Services\" },\n    { href: \"/blog\", label: \"Blog\" },\n    { href: \"/contact\", label: \"Contact\" },\n    { href: \"/social-links\", label: \"Social Links\" },\n  ];\n\n  const isActive = (href: string) => {\n    if (href === \"/\") return location === \"/\";\n    return location.startsWith(href);\n  };\n\n  return (\n    <header\n      className={`sticky top-0 z-50 w-full border-b transition-all duration-300 ${\n        isScrolled\n          ? \"bg-background/80 backdrop-blur-md shadow-sm\"\n          : \"bg-background/60 backdrop-blur-sm\"\n      }`}\n    >\n      <nav className=\"container mx-auto px-4 lg:px-8\">\n        <div className=\"flex h-16 items-center justify-between\">\n          <Link href=\"/\" data-testid=\"link-home\">\n            <a className=\"text-xl font-bold tracking-tight hover-elevate active-elevate-2 px-2 py-1 rounded-md\">\n              Kartik<span className=\"text-primary\">.</span>\n            </a>\n          </Link>\n\n          {/* Desktop Navigation */}\n          <div className=\"hidden md:flex items-center gap-1\">\n            {navLinks.map((link) => (\n              <Link key={link.href} href={link.href}>\n                <a\n                  data-testid={`link-nav-${link.label.toLowerCase().replace(\" \", \"-\")}`}\n                  className={`px-4 py-2 rounded-md text-sm font-medium transition-colors hover-elevate active-elevate-2 ${\n                    isActive(link.href)\n                      ? \"bg-accent text-accent-foreground\"\n                      : \"text-muted-foreground\"\n                  }`}\n                >\n                  {link.label}\n                </a>\n              </Link>\n            ))}\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <ThemeToggle />\n            {user && (\n              <Link href=\"/admin\">\n                <Button\n                  variant=\"default\"\n                  size=\"sm\"\n                  data-testid=\"button-admin\"\n                  className=\"hidden md:inline-flex\"\n                >\n                  Admin\n                </Button>\n              </Link>\n            )}\n\n            {/* Mobile Menu Button */}\n            <Button\n              variant=\"ghost\"\n              size=\"icon\"\n              className=\"md:hidden hover-elevate active-elevate-2\"\n              onClick={() => setIsMobileMenuOpen(!isMobileMenuOpen)}\n              data-testid=\"button-mobile-menu\"\n            >\n              {isMobileMenuOpen ? (\n                <X className=\"h-5 w-5\" />\n              ) : (\n                <Menu className=\"h-5 w-5\" />\n              )}\n            </Button>\n          </div>\n        </div>\n\n        {/* Mobile Navigation */}\n        {isMobileMenuOpen && (\n          <div className=\"md:hidden py-4 border-t\">\n            <div className=\"flex flex-col gap-2\">\n              {navLinks.map((link) => (\n                <Link key={link.href} href={link.href}>\n                  <a\n                    data-testid={`link-mobile-${link.label.toLowerCase().replace(\" \", \"-\")}`}\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    className={`px-4 py-2 rounded-md text-sm font-medium transition-colors hover-elevate active-elevate-2 block ${\n                      isActive(link.href)\n                        ? \"bg-accent text-accent-foreground\"\n                        : \"text-muted-foreground\"\n                    }`}\n                  >\n                    {link.label}\n                  </a>\n                </Link>\n              ))}\n              {user && (\n                <Link href=\"/admin\">\n                  <Button\n                    variant=\"default\"\n                    size=\"sm\"\n                    className=\"w-full mt-2\"\n                    onClick={() => setIsMobileMenuOpen(false)}\n                    data-testid=\"button-mobile-admin\"\n                  >\n                    Admin Panel\n                  </Button>\n                </Link>\n              )}\n            </div>\n          </div>\n        )}\n      </nav>\n    </header>\n  );\n}\n","size_bytes":4919},"client/src/pages/admin-skills.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Pencil, Trash2, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport {\n  Select,\n  SelectContent,\n  SelectItem,\n  SelectTrigger,\n  SelectValue,\n} from \"@/components/ui/select\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertSkillSchema, type InsertSkill, type Skill } from \"@shared/schema\";\n\nexport default function AdminSkills() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingSkill, setEditingSkill] = useState<Skill | null>(null);\n\n  const { data: skills, isLoading } = useQuery<Skill[]>({\n    queryKey: [\"/api/skills\"],\n  });\n\n  const form = useForm<InsertSkill>({\n    resolver: zodResolver(insertSkillSchema),\n    defaultValues: {\n      name: \"\",\n      category: \"technical\",\n      level: \"intermediate\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertSkill) => {\n      return await apiRequest(\"POST\", \"/api/skills\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/skills\"] });\n      toast({ title: \"Skill created successfully\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertSkill }) => {\n      return await apiRequest(\"PATCH\", `/api/skills/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/skills\"] });\n      toast({ title: \"Skill updated successfully\" });\n      setDialogOpen(false);\n      setEditingSkill(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/skills/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/skills\"] });\n      toast({ title: \"Skill deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (skill: Skill) => {\n    setEditingSkill(skill);\n    form.reset({\n      name: skill.name,\n      category: skill.category,\n      level: skill.level,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertSkill) => {\n    if (editingSkill) {\n      updateMutation.mutate({ id: editingSkill.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const groupedSkills = skills?.reduce((acc, skill) => {\n    if (!acc[skill.category]) {\n      acc[skill.category] = [];\n    }\n    acc[skill.category].push(skill);\n    return acc;\n  }, {} as Record<string, Skill[]>);\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <Link href=\"/admin\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-2\" data-testid=\"link-back\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-4xl font-bold\">Manage Skills</h1>\n          </div>\n\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => { setEditingSkill(null); form.reset(); }} data-testid=\"button-add-skill\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Skill\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingSkill ? \"Edit Skill\" : \"Add New Skill\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"name\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Skill Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-name\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"category\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Category</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-category\">\n                              <SelectValue placeholder=\"Select category\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"technical\">Technical Skills</SelectItem>\n                            <SelectItem value=\"tools\">Tools & Technologies</SelectItem>\n                            <SelectItem value=\"soft\">Soft Skills</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"level\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Proficiency Level</FormLabel>\n                        <Select onValueChange={field.onChange} defaultValue={field.value}>\n                          <FormControl>\n                            <SelectTrigger data-testid=\"select-level\">\n                              <SelectValue placeholder=\"Select level\" />\n                            </SelectTrigger>\n                          </FormControl>\n                          <SelectContent>\n                            <SelectItem value=\"beginner\">Beginner</SelectItem>\n                            <SelectItem value=\"intermediate\">Intermediate</SelectItem>\n                            <SelectItem value=\"advanced\">Advanced</SelectItem>\n                            <SelectItem value=\"expert\">Expert</SelectItem>\n                          </SelectContent>\n                        </Select>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save Skill\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        ) : groupedSkills && Object.keys(groupedSkills).length > 0 ? (\n          <div className=\"space-y-8\">\n            {Object.entries(groupedSkills).map(([category, categorySkills]) => (\n              <div key={category}>\n                <h2 className=\"text-2xl font-bold mb-4 capitalize\">{category}</h2>\n                <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                  {categorySkills.map((skill) => (\n                    <Card key={skill.id} data-testid={`skill-card-${skill.id}`}>\n                      <CardContent className=\"p-4 flex items-center justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold mb-1\">{skill.name}</h3>\n                          <Badge variant=\"secondary\" className=\"text-xs capitalize\">\n                            {skill.level}\n                          </Badge>\n                        </div>\n                        <div className=\"flex gap-2\">\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => handleEdit(skill)}\n                            data-testid={`button-edit-${skill.id}`}\n                          >\n                            <Pencil className=\"h-4 w-4\" />\n                          </Button>\n                          <Button\n                            size=\"icon\"\n                            variant=\"ghost\"\n                            className=\"h-8 w-8\"\n                            onClick={() => deleteMutation.mutate(skill.id)}\n                            disabled={deleteMutation.isPending}\n                            data-testid={`button-delete-${skill.id}`}\n                          >\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </div>\n                      </CardContent>\n                    </Card>\n                  ))}\n                </div>\n              </div>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground\">No skills yet. Add your first one!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10077},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/pages/social-links.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { ExternalLink, Loader2, Share2 } from \"lucide-react\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport type { SocialLink } from \"@shared/schema\";\nimport * as Icons from \"lucide-react\";\n\nexport default function SocialLinks() {\n  const { data: socialLinks, isLoading } = useQuery<SocialLink[]>({\n    queryKey: [\"/api/social-links\"],\n  });\n\n  const getIcon = (iconName: string) => {\n    const IconComponent = (Icons as any)[iconName];\n    return IconComponent ? IconComponent : Share2;\n  };\n\n  const sortedLinks = socialLinks?.sort(\n    (a, b) => parseInt(a.order) - parseInt(b.order)\n  );\n\n  return (\n    <div className=\"min-h-screen py-20 bg-gradient-to-br from-primary/5 via-background to-chart-2/5\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-2xl\">\n        {/* Profile Header */}\n        <div className=\"text-center mb-12\">\n          <div className=\"mb-6 flex justify-center\">\n            <div className=\"relative\">\n              <img\n                src=\"/favicon.png\"\n                alt=\"Kartik Sharma\"\n                className=\"w-24 h-24 rounded-full object-cover shadow-xl\"\n              />\n              <div className=\"absolute inset-0 w-24 h-24 rounded-full bg-gradient-to-br from-primary to-chart-2 opacity-30 blur-xl animate-pulse -z-10\" />\n            </div>\n          </div>\n          <h1 className=\"text-4xl font-bold mb-3\">Kartik Sharma</h1>\n          <p className=\"text-lg text-muted-foreground mb-2\">\n            BCA Student | Aspiring Software Developer\n          </p>\n          <p className=\"text-muted-foreground\">\n            Passionate About Coding & Problem-Solving\n          </p>\n        </div>\n\n        {/* Social Links */}\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : sortedLinks && sortedLinks.length > 0 ? (\n          <div className=\"space-y-4\">\n            {sortedLinks.map((link) => {\n              const Icon = getIcon(link.icon);\n              return (\n                <a\n                  key={link.id}\n                  href={link.url}\n                  target=\"_blank\"\n                  rel=\"noopener noreferrer\"\n                  className=\"block\"\n                  data-testid={`link-${link.platform.toLowerCase()}`}\n                >\n                  <Card className=\"hover-elevate active-elevate-2 transition-all hover:-translate-y-1 cursor-pointer\">\n                    <CardContent className=\"p-6 flex items-center gap-4\">\n                      <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                        <Icon className=\"h-6 w-6 text-primary\" />\n                      </div>\n                      <div className=\"flex-1 min-w-0\">\n                        <h3 className=\"font-semibold text-lg mb-1\">\n                          {link.platform}\n                        </h3>\n                        {link.handle && (\n                          <p className=\"text-sm text-muted-foreground\">\n                            {link.handle}\n                          </p>\n                        )}\n                      </div>\n                      <ExternalLink className=\"h-5 w-5 text-muted-foreground flex-shrink-0\" />\n                    </CardContent>\n                  </Card>\n                </a>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <Share2 className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n            <p className=\"text-muted-foreground\">No social links added yet.</p>\n          </div>\n        )}\n\n        {/* Footer */}\n        <div className=\"mt-12 text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            Based in Jaipur, Rajasthan, India\n          </p>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":4013},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"client/src/components/theme-provider.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"light\" | \"dark\";\n\ntype ThemeProviderProps = {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n};\n\ntype ThemeProviderState = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n  toggleTheme: () => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderState | undefined>(\n  undefined\n);\n\nexport function ThemeProvider({\n  children,\n  defaultTheme = \"dark\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(\"theme\") as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = document.documentElement;\n    root.classList.remove(\"light\", \"dark\");\n    root.classList.add(theme);\n    localStorage.setItem(\"theme\", theme);\n  }, [theme]);\n\n  const toggleTheme = () => {\n    setTheme((prev) => (prev === \"light\" ? \"dark\" : \"light\"));\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={{ theme, setTheme, toggleTheme }}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n  return context;\n}\n","size_bytes":1255},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Mail, MapPin, Linkedin, Send, CheckCircle } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { insertContactMessageSchema, type InsertContactMessage } from \"@shared/schema\";\nimport { apiRequest } from \"@/lib/queryClient\";\n\nexport default function Contact() {\n  const { toast } = useToast();\n  const [isSubmitted, setIsSubmitted] = useState(false);\n\n  const form = useForm<InsertContactMessage>({\n    resolver: zodResolver(insertContactMessageSchema),\n    defaultValues: {\n      name: \"\",\n      email: \"\",\n      message: \"\",\n    },\n  });\n\n  const contactMutation = useMutation({\n    mutationFn: async (data: InsertContactMessage) => {\n      return await apiRequest(\"POST\", \"/api/contact\", data);\n    },\n    onSuccess: () => {\n      setIsSubmitted(true);\n      form.reset();\n      toast({\n        title: \"Message sent!\",\n        description: \"Thank you for reaching out. I'll get back to you soon.\",\n      });\n    },\n    onError: () => {\n      toast({\n        title: \"Error\",\n        description: \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const onSubmit = (data: InsertContactMessage) => {\n    contactMutation.mutate(data);\n  };\n\n  const contactInfo = [\n    {\n      icon: Mail,\n      label: \"Email\",\n      value: \"Contact via form\",\n      link: null,\n    },\n    {\n      icon: Linkedin,\n      label: \"LinkedIn\",\n      value: \"linkedin.com/in/kartik-sharma06\",\n      link: \"https://linkedin.com/in/kartik-sharma06\",\n    },\n    {\n      icon: MapPin,\n      label: \"Location\",\n      value: \"Jaipur, Rajasthan, India\",\n      link: null,\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-6xl\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Get In Touch</h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Have a project in mind or want to collaborate? I'd love to hear from\n            you!\n          </p>\n        </div>\n\n        <div className=\"grid grid-cols-1 lg:grid-cols-5 gap-8\">\n          {/* Contact Info */}\n          <div className=\"lg:col-span-2 space-y-6\">\n            <div>\n              <h2 className=\"text-2xl font-bold mb-6\">Contact Information</h2>\n              <div className=\"space-y-4\">\n                {contactInfo.map((info, index) => {\n                  const Icon = info.icon;\n                  return (\n                    <Card\n                      key={index}\n                      className=\"hover-elevate transition-transform hover:-translate-y-1\"\n                    >\n                      <CardContent className=\"p-4 flex items-start gap-4\">\n                        <div className=\"w-10 h-10 rounded-lg bg-primary/10 flex items-center justify-center flex-shrink-0\">\n                          <Icon className=\"h-5 w-5 text-primary\" />\n                        </div>\n                        <div className=\"flex-1 min-w-0\">\n                          <h3 className=\"font-semibold mb-1\">{info.label}</h3>\n                          {info.link ? (\n                            <a\n                              href={info.link}\n                              target=\"_blank\"\n                              rel=\"noopener noreferrer\"\n                              className=\"text-sm text-muted-foreground hover:text-foreground transition-colors break-all\"\n                              data-testid={`link-${info.label.toLowerCase()}`}\n                            >\n                              {info.value}\n                            </a>\n                          ) : (\n                            <p className=\"text-sm text-muted-foreground\">\n                              {info.value}\n                            </p>\n                          )}\n                        </div>\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </div>\n\n            <Card className=\"bg-gradient-to-br from-primary/10 to-chart-2/10\">\n              <CardContent className=\"p-6\">\n                <h3 className=\"font-semibold mb-2\">Open to Opportunities</h3>\n                <p className=\"text-sm text-muted-foreground leading-relaxed\">\n                  I'm currently seeking internship opportunities and freelance\n                  projects. Feel free to reach out if you have an interesting\n                  project or opportunity!\n                </p>\n              </CardContent>\n            </Card>\n          </div>\n\n          {/* Contact Form */}\n          <div className=\"lg:col-span-3\">\n            <Card>\n              <CardHeader>\n                <CardTitle className=\"text-2xl\">Send a Message</CardTitle>\n              </CardHeader>\n              <CardContent>\n                {isSubmitted ? (\n                  <div className=\"text-center py-12\">\n                    <CheckCircle className=\"h-16 w-16 mx-auto mb-4 text-chart-2\" />\n                    <h3 className=\"text-xl font-semibold mb-2\">\n                      Message Sent Successfully!\n                    </h3>\n                    <p className=\"text-muted-foreground mb-6\">\n                      Thank you for reaching out. I'll get back to you as soon\n                      as possible.\n                    </p>\n                    <Button\n                      onClick={() => setIsSubmitted(false)}\n                      variant=\"outline\"\n                      data-testid=\"button-send-another\"\n                    >\n                      Send Another Message\n                    </Button>\n                  </div>\n                ) : (\n                  <Form {...form}>\n                    <form\n                      onSubmit={form.handleSubmit(onSubmit)}\n                      className=\"space-y-6\"\n                    >\n                      <FormField\n                        control={form.control}\n                        name=\"name\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Name</FormLabel>\n                            <FormControl>\n                              <Input\n                                placeholder=\"Your name\"\n                                {...field}\n                                data-testid=\"input-name\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"email\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Email</FormLabel>\n                            <FormControl>\n                              <Input\n                                type=\"email\"\n                                placeholder=\"your.email@example.com\"\n                                {...field}\n                                data-testid=\"input-email\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <FormField\n                        control={form.control}\n                        name=\"message\"\n                        render={({ field }) => (\n                          <FormItem>\n                            <FormLabel>Message</FormLabel>\n                            <FormControl>\n                              <Textarea\n                                placeholder=\"Tell me about your project or inquiry...\"\n                                className=\"min-h-32 resize-none\"\n                                {...field}\n                                data-testid=\"input-message\"\n                              />\n                            </FormControl>\n                            <FormMessage />\n                          </FormItem>\n                        )}\n                      />\n\n                      <Button\n                        type=\"submit\"\n                        className=\"w-full\"\n                        disabled={contactMutation.isPending}\n                        data-testid=\"button-submit\"\n                      >\n                        {contactMutation.isPending ? (\n                          <>\n                            <Send className=\"h-4 w-4 mr-2 animate-pulse\" />\n                            Sending...\n                          </>\n                        ) : (\n                          <>\n                            <Send className=\"h-4 w-4 mr-2\" />\n                            Send Message\n                          </>\n                        )}\n                      </Button>\n                    </form>\n                  </Form>\n                )}\n              </CardContent>\n            </Card>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":9601},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { setupAuth, ensureAuthenticated } from \"./auth\";\nimport {\n  insertProjectSchema,\n  insertCertificateSchema,\n  insertSkillSchema,\n  insertServiceSchema,\n  insertSocialLinkSchema,\n  insertContactMessageSchema,\n  insertBlogPostSchema,\n} from \"@shared/schema\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  setupAuth(app);\n  app.get(\"/api/projects\", async (_req, res) => {\n    const projects = await storage.getProjects();\n    res.json(projects);\n  });\n\n  app.get(\"/api/projects/:id\", async (req, res) => {\n    const project = await storage.getProject(req.params.id);\n    if (!project) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n    res.json(project);\n  });\n\n  app.post(\"/api/projects\", ensureAuthenticated, async (req, res) => {\n    const result = insertProjectSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const project = await storage.createProject(result.data);\n    res.json(project);\n  });\n\n  app.patch(\"/api/projects/:id\", ensureAuthenticated, async (req, res) => {\n    const result = insertProjectSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const project = await storage.updateProject(req.params.id, result.data);\n    if (!project) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n    res.json(project);\n  });\n\n  app.delete(\"/api/projects/:id\", ensureAuthenticated, async (req, res) => {\n    const success = await storage.deleteProject(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Project not found\" });\n    }\n    res.json({ success: true });\n  });\n\n  app.get(\"/api/certificates\", async (_req, res) => {\n    const certificates = await storage.getCertificates();\n    res.json(certificates);\n  });\n\n  app.get(\"/api/certificates/:id\", async (req, res) => {\n    const certificate = await storage.getCertificate(req.params.id);\n    if (!certificate) {\n      return res.status(404).json({ error: \"Certificate not found\" });\n    }\n    res.json(certificate);\n  });\n\n  app.post(\"/api/certificates\", ensureAuthenticated, async (req, res) => {\n    const result = insertCertificateSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const certificate = await storage.createCertificate(result.data);\n    res.json(certificate);\n  });\n\n  app.patch(\"/api/certificates/:id\", ensureAuthenticated, async (req, res) => {\n    const result = insertCertificateSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const certificate = await storage.updateCertificate(req.params.id, result.data);\n    if (!certificate) {\n      return res.status(404).json({ error: \"Certificate not found\" });\n    }\n    res.json(certificate);\n  });\n\n  app.delete(\"/api/certificates/:id\", ensureAuthenticated, async (req, res) => {\n    const success = await storage.deleteCertificate(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Certificate not found\" });\n    }\n    res.json({ success: true });\n  });\n\n  app.get(\"/api/skills\", async (_req, res) => {\n    const skills = await storage.getSkills();\n    res.json(skills);\n  });\n\n  app.get(\"/api/skills/:id\", async (req, res) => {\n    const skill = await storage.getSkill(req.params.id);\n    if (!skill) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n    res.json(skill);\n  });\n\n  app.post(\"/api/skills\", ensureAuthenticated, async (req, res) => {\n    const result = insertSkillSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const skill = await storage.createSkill(result.data);\n    res.json(skill);\n  });\n\n  app.patch(\"/api/skills/:id\", ensureAuthenticated, async (req, res) => {\n    const result = insertSkillSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const skill = await storage.updateSkill(req.params.id, result.data);\n    if (!skill) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n    res.json(skill);\n  });\n\n  app.delete(\"/api/skills/:id\", ensureAuthenticated, async (req, res) => {\n    const success = await storage.deleteSkill(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Skill not found\" });\n    }\n    res.json({ success: true });\n  });\n\n  app.get(\"/api/services\", async (_req, res) => {\n    const services = await storage.getServices();\n    res.json(services);\n  });\n\n  app.get(\"/api/services/:id\", async (req, res) => {\n    const service = await storage.getService(req.params.id);\n    if (!service) {\n      return res.status(404).json({ error: \"Service not found\" });\n    }\n    res.json(service);\n  });\n\n  app.post(\"/api/services\", ensureAuthenticated, async (req, res) => {\n    const result = insertServiceSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const service = await storage.createService(result.data);\n    res.json(service);\n  });\n\n  app.patch(\"/api/services/:id\", ensureAuthenticated, async (req, res) => {\n    const result = insertServiceSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const service = await storage.updateService(req.params.id, result.data);\n    if (!service) {\n      return res.status(404).json({ error: \"Service not found\" });\n    }\n    res.json(service);\n  });\n\n  app.delete(\"/api/services/:id\", ensureAuthenticated, async (req, res) => {\n    const success = await storage.deleteService(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Service not found\" });\n    }\n    res.json({ success: true });\n  });\n\n  app.get(\"/api/social-links\", async (_req, res) => {\n    const socialLinks = await storage.getSocialLinks();\n    res.json(socialLinks);\n  });\n\n  app.get(\"/api/social-links/:id\", async (req, res) => {\n    const socialLink = await storage.getSocialLink(req.params.id);\n    if (!socialLink) {\n      return res.status(404).json({ error: \"Social link not found\" });\n    }\n    res.json(socialLink);\n  });\n\n  app.post(\"/api/social-links\", ensureAuthenticated, async (req, res) => {\n    const result = insertSocialLinkSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const socialLink = await storage.createSocialLink(result.data);\n    res.json(socialLink);\n  });\n\n  app.patch(\"/api/social-links/:id\", ensureAuthenticated, async (req, res) => {\n    const result = insertSocialLinkSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const socialLink = await storage.updateSocialLink(req.params.id, result.data);\n    if (!socialLink) {\n      return res.status(404).json({ error: \"Social link not found\" });\n    }\n    res.json(socialLink);\n  });\n\n  app.delete(\"/api/social-links/:id\", ensureAuthenticated, async (req, res) => {\n    const success = await storage.deleteSocialLink(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Social link not found\" });\n    }\n    res.json({ success: true });\n  });\n\n  app.post(\"/api/contact\", async (req, res) => {\n    const result = insertContactMessageSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const message = await storage.createContactMessage(result.data);\n    res.json(message);\n  });\n\n  app.get(\"/api/contact-messages\", ensureAuthenticated, async (_req, res) => {\n    const messages = await storage.getContactMessages();\n    res.json(messages);\n  });\n\n  app.get(\"/api/blog-posts\", async (req, res) => {\n    const publishedOnly = req.query.published === 'true';\n    const blogPosts = await storage.getBlogPosts(publishedOnly);\n    res.json(blogPosts);\n  });\n\n  app.get(\"/api/blog-posts/slug/:slug\", async (req, res) => {\n    const blogPost = await storage.getBlogPostBySlug(req.params.slug);\n    if (!blogPost) {\n      return res.status(404).json({ error: \"Blog post not found\" });\n    }\n    res.json(blogPost);\n  });\n\n  app.get(\"/api/blog-posts/:id\", async (req, res) => {\n    const blogPost = await storage.getBlogPost(req.params.id);\n    if (!blogPost) {\n      return res.status(404).json({ error: \"Blog post not found\" });\n    }\n    res.json(blogPost);\n  });\n\n  app.post(\"/api/blog-posts\", ensureAuthenticated, async (req, res) => {\n    const result = insertBlogPostSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const blogPost = await storage.createBlogPost(result.data);\n    res.json(blogPost);\n  });\n\n  app.patch(\"/api/blog-posts/:id\", ensureAuthenticated, async (req, res) => {\n    const result = insertBlogPostSchema.safeParse(req.body);\n    if (!result.success) {\n      return res.status(400).json({ error: result.error.message });\n    }\n    const blogPost = await storage.updateBlogPost(req.params.id, result.data);\n    if (!blogPost) {\n      return res.status(404).json({ error: \"Blog post not found\" });\n    }\n    res.json(blogPost);\n  });\n\n  app.delete(\"/api/blog-posts/:id\", ensureAuthenticated, async (req, res) => {\n    const success = await storage.deleteBlogPost(req.params.id);\n    if (!success) {\n      return res.status(404).json({ error: \"Blog post not found\" });\n    }\n    res.json({ success: true });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":9941},"client/src/lib/protected-route.tsx":{"content":"import { useAuth } from \"@/hooks/use-auth\";\nimport { Loader2 } from \"lucide-react\";\nimport { Redirect, Route } from \"wouter\";\n\nexport function ProtectedRoute({\n  path,\n  component: Component,\n}: {\n  path: string;\n  component: () => React.JSX.Element;\n}) {\n  const { user, isLoading } = useAuth();\n\n  if (isLoading) {\n    return (\n      <Route path={path}>\n        <div className=\"flex items-center justify-center min-h-screen\" data-testid=\"loading-auth\">\n          <Loader2 className=\"h-8 w-8 animate-spin text-border\" />\n        </div>\n      </Route>\n    );\n  }\n\n  if (!user) {\n    return (\n      <Route path={path}>\n        <Redirect to=\"/auth\" />\n      </Route>\n    );\n  }\n\n  return <Route path={path} component={Component} />;\n}\n","size_bytes":733},"replit.md":{"content":"# Kartik Sharma Portfolio Website\n\n## Overview\n\nThis is a full-stack portfolio website for Kartik Sharma, a BCA student and aspiring software developer. The application showcases projects, certifications, skills, services, and provides contact functionality. It features a modern, professional design with dark/light theme support, built using React for the frontend and Express for the backend, with PostgreSQL as the database.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n\n**Framework & Build Tool:**\n- React 18+ with TypeScript for type safety\n- Vite as the build tool and development server\n- Wouter for client-side routing (lightweight alternative to React Router)\n\n**UI Component System:**\n- Shadcn/ui component library (New York style variant)\n- Radix UI primitives for accessible, unstyled components\n- Tailwind CSS for styling with custom design tokens\n- Class Variance Authority (CVA) for component variants\n\n**State Management:**\n- TanStack Query (React Query) v5 for server state management\n- React Hook Form with Zod validation for form handling\n- Local React state for UI-specific state\n\n**Design System:**\n- Custom color palette with dark/light mode support\n- Professional blue primary color (HSL: 217 91% 60%)\n- Success green accent color (HSL: 142 71% 45%)\n- Theme system using CSS custom properties\n- Design inspired by Linear, Stripe, and Notion aesthetics\n\n**Key Features:**\n- Responsive navigation with mobile menu\n- Theme toggle (dark/light mode persisted to localStorage)\n- Google Analytics integration for page tracking\n- Toast notifications for user feedback\n- Reusable UI components (buttons, cards, dialogs, forms, etc.)\n\n### Backend Architecture\n\n**Server Framework:**\n- Express.js with TypeScript\n- ES Modules (type: \"module\")\n- Custom middleware for request logging and JSON parsing\n\n**API Design:**\n- RESTful API endpoints under `/api` prefix\n- CRUD operations for: projects, certificates, skills, services, social links, contact messages\n- Request validation using Zod schemas\n- Consistent error handling with appropriate HTTP status codes\n\n**Development Setup:**\n- Vite middleware integration for HMR in development\n- Static file serving in production\n- Separate build processes for client and server\n- TSX for TypeScript execution in development\n\n### Data Layer\n\n**Database:**\n- PostgreSQL via Neon serverless database\n- Drizzle ORM for type-safe database queries\n- Database schema defined in `shared/schema.ts`\n\n**Schema Design:**\n- **Projects**: title, description, technologies (array), URLs, images, featured flag, ordering\n- **Certificates**: title, issuer, issue date, credential info, skills (array)\n- **Skills**: name, category (technical/soft/tools/other), proficiency level\n- **Services**: title, description, icon name for display\n- **Social Links**: platform, URL, icon, handle, ordering\n- **Contact Messages**: name, email, message, timestamp\n\n**Data Validation:**\n- Drizzle-Zod for generating Zod schemas from database schema\n- Type inference for Insert and Select operations\n- Shared schemas between client and server for consistency\n\n**Storage Abstraction:**\n- IStorage interface defines all data operations\n- Supports future implementation of actual database storage\n- Currently structured for in-memory or database-backed storage\n\n### External Dependencies\n\n**Third-Party Services:**\n- **Neon Database**: Serverless PostgreSQL hosting\n- **Google Analytics**: Website analytics and page tracking\n- **Google Fonts**: Inter and JetBrains Mono font families\n\n**Key NPM Packages:**\n- **@tanstack/react-query**: Server state management and caching\n- **drizzle-orm**: TypeScript ORM for PostgreSQL\n- **@neondatabase/serverless**: Neon database client\n- **zod**: Runtime type validation\n- **react-hook-form**: Form state management\n- **@hookform/resolvers**: Zod integration for form validation\n- **wouter**: Lightweight routing library\n- **class-variance-authority**: Type-safe component variants\n- **tailwindcss**: Utility-first CSS framework\n- **lucide-react**: Icon library\n- **date-fns**: Date manipulation utilities\n- **cmdk**: Command palette component\n- **embla-carousel-react**: Carousel/slider functionality\n\n**Development Tools:**\n- **TypeScript**: Static type checking\n- **Vite**: Fast build tool and dev server\n- **ESBuild**: Fast JavaScript bundler for production\n- **Drizzle Kit**: Database migration and schema management\n- **TSX**: TypeScript execution for development\n- **Replit plugins**: Runtime error overlay, cartographer, dev banner\n\n**UI Component Libraries:**\n- **Radix UI**: Comprehensive set of accessible component primitives (accordion, alert-dialog, avatar, checkbox, dialog, dropdown-menu, hover-card, label, menubar, navigation-menu, popover, progress, radio-group, scroll-area, select, separator, slider, switch, tabs, toast, toggle, tooltip)\n- All components customized with Tailwind CSS and theme variables\n\n**Build & Deployment:**\n- Client builds to `dist/public`\n- Server bundles to `dist/index.js`\n- Environment variables for database connection and analytics\n- Production mode uses bundled server with static file serving","size_bytes":5190},"client/src/pages/admin-services.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Pencil, Trash2, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertServiceSchema, type InsertService, type Service } from \"@shared/schema\";\n\nexport default function AdminServices() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingService, setEditingService] = useState<Service | null>(null);\n\n  const { data: services, isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const form = useForm<InsertService>({\n    resolver: zodResolver(insertServiceSchema),\n    defaultValues: {\n      title: \"\",\n      description: \"\",\n      icon: \"Briefcase\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertService) => {\n      return await apiRequest(\"POST\", \"/api/services\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service created successfully\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertService }) => {\n      return await apiRequest(\"PATCH\", `/api/services/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service updated successfully\" });\n      setDialogOpen(false);\n      setEditingService(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/services/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/services\"] });\n      toast({ title: \"Service deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (service: Service) => {\n    setEditingService(service);\n    form.reset({\n      title: service.title,\n      description: service.description,\n      icon: service.icon,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertService) => {\n    if (editingService) {\n      updateMutation.mutate({ id: editingService.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <Link href=\"/admin\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-2\" data-testid=\"link-back\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-4xl font-bold\">Manage Services</h1>\n          </div>\n\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => { setEditingService(null); form.reset(); }} data-testid=\"button-add-service\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Service\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingService ? \"Edit Service\" : \"Add New Service\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Service Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"description\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Description</FormLabel>\n                        <FormControl>\n                          <Textarea {...field} className=\"min-h-24\" data-testid=\"input-description\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"icon\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Icon Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-icon\" />\n                        </FormControl>\n                        <FormDescription>\n                          Use Lucide icon names (e.g., Code, Globe, Palette, Wrench)\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save Service\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        ) : services && services.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {services.map((service) => (\n              <Card key={service.id} data-testid={`service-card-${service.id}`}>\n                <CardHeader>\n                  <CardTitle>{service.title}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <p className=\"text-sm text-muted-foreground line-clamp-3\">\n                    {service.description}\n                  </p>\n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(service)}\n                      data-testid={`button-edit-${service.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4 mr-2\" />\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => deleteMutation.mutate(service.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${service.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Delete\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground\">No services yet. Add your first one!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":8254},"client/src/hooks/use-auth.tsx":{"content":"import { createContext, ReactNode, useContext } from \"react\";\nimport {\n  useQuery,\n  useMutation,\n  UseMutationResult,\n} from \"@tanstack/react-query\";\nimport { User as SelectUser, InsertUser } from \"@shared/schema\";\nimport { getQueryFn, apiRequest, queryClient } from \"../lib/queryClient\";\nimport { useToast } from \"@/hooks/use-toast\";\n\ntype AuthContextType = {\n  user: SelectUser | null;\n  isLoading: boolean;\n  error: Error | null;\n  loginMutation: UseMutationResult<SelectUser, Error, LoginData>;\n  logoutMutation: UseMutationResult<void, Error, void>;\n  registerMutation: UseMutationResult<SelectUser, Error, InsertUser>;\n};\n\ntype LoginData = Pick<InsertUser, \"username\" | \"password\">;\n\nexport const AuthContext = createContext<AuthContextType | null>(null);\n\nexport function AuthProvider({ children }: { children: ReactNode }) {\n  const { toast } = useToast();\n  const {\n    data: user,\n    error,\n    isLoading,\n  } = useQuery<SelectUser | undefined, Error>({\n    queryKey: [\"/api/user\"],\n    queryFn: getQueryFn({ on401: \"returnNull\" }),\n  });\n\n  const loginMutation = useMutation({\n    mutationFn: async (credentials: LoginData) => {\n      const res = await apiRequest(\"POST\", \"/api/login\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Logged in successfully\",\n        description: \"Welcome back!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Login failed\",\n        description: error.message || \"Invalid username or password\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const registerMutation = useMutation({\n    mutationFn: async (credentials: InsertUser) => {\n      const res = await apiRequest(\"POST\", \"/api/register\", credentials);\n      return await res.json();\n    },\n    onSuccess: (user: SelectUser) => {\n      queryClient.setQueryData([\"/api/user\"], user);\n      toast({\n        title: \"Registration successful\",\n        description: \"Welcome!\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Registration failed\",\n        description: error.message || \"Unable to create account\",\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  const logoutMutation = useMutation({\n    mutationFn: async () => {\n      await apiRequest(\"POST\", \"/api/logout\");\n    },\n    onSuccess: () => {\n      queryClient.setQueryData([\"/api/user\"], null);\n      toast({\n        title: \"Logged out\",\n        description: \"You have been logged out successfully\",\n      });\n    },\n    onError: (error: Error) => {\n      toast({\n        title: \"Logout failed\",\n        description: error.message,\n        variant: \"destructive\",\n      });\n    },\n  });\n\n  return (\n    <AuthContext.Provider\n      value={{\n        user: user ?? null,\n        isLoading,\n        error,\n        loginMutation,\n        logoutMutation,\n        registerMutation,\n      }}\n    >\n      {children}\n    </AuthContext.Provider>\n  );\n}\n\nexport function useAuth() {\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error(\"useAuth must be used within an AuthProvider\");\n  }\n  return context;\n}\n","size_bytes":3196},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/pages/admin-certificates.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Pencil, Trash2, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertCertificateSchema, type InsertCertificate, type Certificate } from \"@shared/schema\";\n\nexport default function AdminCertificates() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingCert, setEditingCert] = useState<Certificate | null>(null);\n  const [skillInput, setSkillInput] = useState(\"\");\n\n  const { data: certificates, isLoading } = useQuery<Certificate[]>({\n    queryKey: [\"/api/certificates\"],\n  });\n\n  const form = useForm<InsertCertificate>({\n    resolver: zodResolver(insertCertificateSchema),\n    defaultValues: {\n      title: \"\",\n      issuer: \"\",\n      issueDate: \"\",\n      credentialId: \"\",\n      credentialUrl: \"\",\n      skills: [],\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertCertificate) => {\n      return await apiRequest(\"POST\", \"/api/certificates\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/certificates\"] });\n      toast({ title: \"Certificate created successfully\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertCertificate }) => {\n      return await apiRequest(\"PATCH\", `/api/certificates/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/certificates\"] });\n      toast({ title: \"Certificate updated successfully\" });\n      setDialogOpen(false);\n      setEditingCert(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/certificates/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/certificates\"] });\n      toast({ title: \"Certificate deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (cert: Certificate) => {\n    setEditingCert(cert);\n    form.reset({\n      title: cert.title,\n      issuer: cert.issuer,\n      issueDate: cert.issueDate,\n      credentialId: cert.credentialId || \"\",\n      credentialUrl: cert.credentialUrl || \"\",\n      skills: cert.skills,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertCertificate) => {\n    if (editingCert) {\n      updateMutation.mutate({ id: editingCert.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const addSkill = () => {\n    if (skillInput.trim()) {\n      const currentSkills = form.getValues(\"skills\") || [];\n      form.setValue(\"skills\", [...currentSkills, skillInput.trim()]);\n      setSkillInput(\"\");\n    }\n  };\n\n  const removeSkill = (index: number) => {\n    const currentSkills = form.getValues(\"skills\") || [];\n    form.setValue(\n      \"skills\",\n      currentSkills.filter((_, i) => i !== index)\n    );\n  };\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <Link href=\"/admin\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-2\" data-testid=\"link-back\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-4xl font-bold\">Manage Certificates</h1>\n          </div>\n\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => { setEditingCert(null); form.reset(); }} data-testid=\"button-add-certificate\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Certificate\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-2xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingCert ? \"Edit Certificate\" : \"Add New Certificate\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"title\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Title</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-title\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"issuer\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Issuer</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Microsoft, Google\" data-testid=\"input-issuer\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"issueDate\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Issue Date</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., Oct 2025\" data-testid=\"input-issue-date\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"credentialId\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Credential ID (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-credential-id\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"credentialUrl\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Credential URL (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://...\" data-testid=\"input-credential-url\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"skills\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Related Skills</FormLabel>\n                        <div className=\"flex gap-2\">\n                          <Input\n                            value={skillInput}\n                            onChange={(e) => setSkillInput(e.target.value)}\n                            placeholder=\"Add skill\"\n                            onKeyPress={(e) => e.key === \"Enter\" && (e.preventDefault(), addSkill())}\n                            data-testid=\"input-skill\"\n                          />\n                          <Button type=\"button\" onClick={addSkill} data-testid=\"button-add-skill\">\n                            Add\n                          </Button>\n                        </div>\n                        <div className=\"flex flex-wrap gap-2 mt-2\">\n                          {field.value?.map((skill, index) => (\n                            <Badge key={index} variant=\"secondary\">\n                              {skill}\n                              <button\n                                type=\"button\"\n                                onClick={() => removeSkill(index)}\n                                className=\"ml-2\"\n                                data-testid={`button-remove-skill-${index}`}\n                              >\n                                ×\n                              </button>\n                            </Badge>\n                          ))}\n                        </div>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save Certificate\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        ) : certificates && certificates.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {certificates.map((cert) => (\n              <Card key={cert.id} data-testid={`certificate-card-${cert.id}`}>\n                <CardHeader>\n                  <CardTitle className=\"text-lg\">{cert.title}</CardTitle>\n                </CardHeader>\n                <CardContent className=\"space-y-4\">\n                  <div>\n                    <p className=\"text-sm font-medium\">{cert.issuer}</p>\n                    <p className=\"text-xs text-muted-foreground\">{cert.issueDate}</p>\n                  </div>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {cert.skills.slice(0, 3).map((skill, idx) => (\n                      <Badge key={idx} variant=\"outline\" className=\"text-xs\">\n                        {skill}\n                      </Badge>\n                    ))}\n                  </div>\n                  <div className=\"flex gap-2 pt-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(cert)}\n                      data-testid={`button-edit-${cert.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4\" />\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => deleteMutation.mutate(cert.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${cert.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4\" />\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground\">No certificates yet. Add your first one!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":12089},"client/src/lib/analytics.ts":{"content":"declare global {\n  interface Window {\n    dataLayer: any[];\n    gtag: (...args: any[]) => void;\n  }\n}\n\nexport const initGA = () => {\n  const measurementId = import.meta.env.VITE_GA_MEASUREMENT_ID;\n\n  if (!measurementId) {\n    console.warn('Missing required Google Analytics key: VITE_GA_MEASUREMENT_ID');\n    return;\n  }\n\n  const script1 = document.createElement('script');\n  script1.async = true;\n  script1.src = `https://www.googletagmanager.com/gtag/js?id=${measurementId}`;\n  document.head.appendChild(script1);\n\n  const script2 = document.createElement('script');\n  script2.textContent = `\n    window.dataLayer = window.dataLayer || [];\n    function gtag(){dataLayer.push(arguments);}\n    gtag('js', new Date());\n    gtag('config', '${measurementId}');\n  `;\n  document.head.appendChild(script2);\n};\n\nexport const trackPageView = (url: string) => {\n  if (typeof window === 'undefined' || !window.gtag) return;\n  \n  const measurementId = import.meta.env.VITE_GA_MEASUREMENT_ID;\n  if (!measurementId) return;\n  \n  window.gtag('config', measurementId, {\n    page_path: url\n  });\n};\n\nexport const trackEvent = (\n  action: string, \n  category?: string, \n  label?: string, \n  value?: number\n) => {\n  if (typeof window === 'undefined' || !window.gtag) return;\n  \n  window.gtag('event', action, {\n    event_category: category,\n    event_label: label,\n    value: value,\n  });\n};\n","size_bytes":1374},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\" +\n  \" hover-elevate active-elevate-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"bg-primary text-primary-foreground border border-primary-border\",\n        destructive:\n          \"bg-destructive text-destructive-foreground border border-destructive-border\",\n        outline:\n          // Shows the background color of whatever card / sidebar / accent background it is inside of.\n          // Inherits the current text color.\n          \" border [border-color:var(--button-outline)]  shadow-xs active:shadow-none \",\n        secondary: \"border bg-secondary text-secondary-foreground border border-secondary-border \",\n        // Add a transparent border so that when someone toggles a border on later, it doesn't shift layout/size.\n        ghost: \"border border-transparent\",\n      },\n      // Heights are set as \"min\" heights, because sometimes Ai will place large amount of content\n      // inside buttons. With a min-height they will look appropriate with small amounts of content,\n      // but will expand to fit large amounts of content.\n      size: {\n        default: \"min-h-9 px-4 py-2\",\n        sm: \"min-h-8 rounded-md px-3 text-xs\",\n        lg: \"min-h-10 rounded-md px-8\",\n        icon: \"h-9 w-9\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  },\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  },\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":2359},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/sidebar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, VariantProps } from \"class-variance-authority\"\nimport { PanelLeftIcon } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nfunction SidebarProvider({\n  defaultOpen = true,\n  open: openProp,\n  onOpenChange: setOpenProp,\n  className,\n  style,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  defaultOpen?: boolean\n  open?: boolean\n  onOpenChange?: (open: boolean) => void\n}) {\n  const isMobile = useIsMobile()\n  const [openMobile, setOpenMobile] = React.useState(false)\n\n  // This is the internal state of the sidebar.\n  // We use openProp and setOpenProp for control from outside the component.\n  const [_open, _setOpen] = React.useState(defaultOpen)\n  const open = openProp ?? _open\n  const setOpen = React.useCallback(\n    (value: boolean | ((value: boolean) => boolean)) => {\n      const openState = typeof value === \"function\" ? value(open) : value\n      if (setOpenProp) {\n        setOpenProp(openState)\n      } else {\n        _setOpen(openState)\n      }\n\n      // This sets the cookie to keep the sidebar state.\n      document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n    },\n    [setOpenProp, open]\n  )\n\n  // Helper to toggle the sidebar.\n  const toggleSidebar = React.useCallback(() => {\n    return isMobile ? setOpenMobile((open) => !open) : setOpen((open) => !open)\n  }, [isMobile, setOpen, setOpenMobile])\n\n  // Adds a keyboard shortcut to toggle the sidebar.\n  React.useEffect(() => {\n    const handleKeyDown = (event: KeyboardEvent) => {\n      if (\n        event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n        (event.metaKey || event.ctrlKey)\n      ) {\n        event.preventDefault()\n        toggleSidebar()\n      }\n    }\n\n    window.addEventListener(\"keydown\", handleKeyDown)\n    return () => window.removeEventListener(\"keydown\", handleKeyDown)\n  }, [toggleSidebar])\n\n  // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n  // This makes it easier to style the sidebar with Tailwind classes.\n  const state = open ? \"expanded\" : \"collapsed\"\n\n  const contextValue = React.useMemo<SidebarContextProps>(\n    () => ({\n      state,\n      open,\n      setOpen,\n      isMobile,\n      openMobile,\n      setOpenMobile,\n      toggleSidebar,\n    }),\n    [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n  )\n\n  return (\n    <SidebarContext.Provider value={contextValue}>\n      <TooltipProvider delayDuration={0}>\n        <div\n          data-slot=\"sidebar-wrapper\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH,\n              \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n              ...style,\n            } as React.CSSProperties\n          }\n          className={cn(\n            \"group/sidebar-wrapper has-data-[variant=inset]:bg-sidebar flex min-h-svh w-full\",\n            className\n          )}\n          {...props}\n        >\n          {children}\n        </div>\n      </TooltipProvider>\n    </SidebarContext.Provider>\n  )\n}\n\nfunction Sidebar({\n  side = \"left\",\n  variant = \"sidebar\",\n  collapsible = \"offcanvas\",\n  className,\n  children,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  side?: \"left\" | \"right\"\n  variant?: \"sidebar\" | \"floating\" | \"inset\"\n  collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n}) {\n  const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n  if (collapsible === \"none\") {\n    return (\n      <div\n        data-slot=\"sidebar\"\n        className={cn(\n          \"bg-sidebar text-sidebar-foreground flex h-full w-[var(--sidebar-width)] flex-col\",\n          className\n        )}\n        {...props}\n      >\n        {children}\n      </div>\n    )\n  }\n\n  if (isMobile) {\n    return (\n      <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n        <SheetContent\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar\"\n          data-mobile=\"true\"\n          className=\"bg-sidebar text-sidebar-foreground w-[var(--sidebar-width)] p-0 [&>button]:hidden\"\n          style={\n            {\n              \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n            } as React.CSSProperties\n          }\n          side={side}\n        >\n          <SheetHeader className=\"sr-only\">\n            <SheetTitle>Sidebar</SheetTitle>\n            <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n          </SheetHeader>\n          <div className=\"flex h-full w-full flex-col\">{children}</div>\n        </SheetContent>\n      </Sheet>\n    )\n  }\n\n  return (\n    <div\n      className=\"group peer text-sidebar-foreground hidden md:block\"\n      data-state={state}\n      data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n      data-variant={variant}\n      data-side={side}\n      data-slot=\"sidebar\"\n    >\n      {/* This is what handles the sidebar gap on desktop */}\n      <div\n        data-slot=\"sidebar-gap\"\n        className={cn(\n          \"relative w-[var(--sidebar-width)] bg-transparent transition-[width] duration-200 ease-linear\",\n          \"group-data-[collapsible=offcanvas]:w-0\",\n          \"group-data-[side=right]:rotate-180\",\n          variant === \"floating\" || variant === \"inset\"\n            ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4))]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)]\"\n        )}\n      />\n      <div\n        data-slot=\"sidebar-container\"\n        className={cn(\n          \"fixed inset-y-0 z-10 hidden h-svh w-[var(--sidebar-width)] transition-[left,right,width] duration-200 ease-linear md:flex\",\n          side === \"left\"\n            ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n            : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n          // Adjust the padding for floating and inset variants.\n          variant === \"floating\" || variant === \"inset\"\n            ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)+var(--spacing-4)+2px)]\"\n            : \"group-data-[collapsible=icon]:w-[var(--sidebar-width-icon)] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n          className\n        )}\n        {...props}\n      >\n        <div\n          data-sidebar=\"sidebar\"\n          data-slot=\"sidebar-inner\"\n          className=\"bg-sidebar group-data-[variant=floating]:border-sidebar-border flex h-full w-full flex-col group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:shadow-sm\"\n        >\n          {children}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction SidebarTrigger({\n  className,\n  onClick,\n  ...props\n}: React.ComponentProps<typeof Button>) {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      data-sidebar=\"trigger\"\n      data-slot=\"sidebar-trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeftIcon />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n}\n\nfunction SidebarRail({ className, ...props }: React.ComponentProps<\"button\">) {\n  const { toggleSidebar } = useSidebar()\n\n  // Note: Tailwind v3.4 doesn't support \"in-\" selectors. So the rail won't work perfectly.\n  return (\n    <button\n      data-sidebar=\"rail\"\n      data-slot=\"sidebar-rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"hover:after:bg-sidebar-border absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear group-data-[side=left]:-right-4 group-data-[side=right]:left-0 after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] sm:flex\",\n        \"in-data-[side=left]:cursor-w-resize in-data-[side=right]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"hover:group-data-[collapsible=offcanvas]:bg-sidebar group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInset({ className, ...props }: React.ComponentProps<\"main\">) {\n  return (\n    <main\n      data-slot=\"sidebar-inset\"\n      className={cn(\n        \"bg-background relative flex w-full flex-1 flex-col\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow-sm md:peer-data-[variant=inset]:peer-data-[state=collapsed]:ml-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarInput({\n  className,\n  ...props\n}: React.ComponentProps<typeof Input>) {\n  return (\n    <Input\n      data-slot=\"sidebar-input\"\n      data-sidebar=\"input\"\n      className={cn(\"bg-background h-8 w-full shadow-none\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarHeader({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-header\"\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarFooter({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-footer\"\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarSeparator({\n  className,\n  ...props\n}: React.ComponentProps<typeof Separator>) {\n  return (\n    <Separator\n      data-slot=\"sidebar-separator\"\n      data-sidebar=\"separator\"\n      className={cn(\"bg-sidebar-border mx-2 w-auto\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarContent({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-content\"\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroup({ className, ...props }: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group\"\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupLabel({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"div\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-label\"\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"text-sidebar-foreground/70 ring-sidebar-ring flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium outline-hidden transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:h-4 [&>svg]:w-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupAction({\n  className,\n  asChild = false,\n  ...props\n}: React.ComponentProps<\"button\"> & { asChild?: boolean }) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-group-action\"\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground absolute top-3.5 right-3 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarGroupContent({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-group-content\"\n      data-sidebar=\"group-content\"\n      className={cn(\"w-full text-sm\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenu({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu\"\n      data-sidebar=\"menu\"\n      className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuItem({ className, ...props }: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-item\"\n      data-sidebar=\"menu-item\"\n      className={cn(\"group/menu-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-hidden ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-data-[sidebar=menu-action]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:w-8! group-data-[collapsible=icon]:h-8! group-data-[collapsible=icon]:p-2! [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:p-0!\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nfunction SidebarMenuButton({\n  asChild = false,\n  isActive = false,\n  variant = \"default\",\n  size = \"default\",\n  tooltip,\n  className,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  isActive?: boolean\n  tooltip?: string | React.ComponentProps<typeof TooltipContent>\n} & VariantProps<typeof sidebarMenuButtonVariants>) {\n  const Comp = asChild ? Slot : \"button\"\n  const { isMobile, state } = useSidebar()\n\n  const button = (\n    <Comp\n      data-slot=\"sidebar-menu-button\"\n      data-sidebar=\"menu-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n      {...props}\n    />\n  )\n\n  if (!tooltip) {\n    return button\n  }\n\n  if (typeof tooltip === \"string\") {\n    tooltip = {\n      children: tooltip,\n    }\n  }\n\n  return (\n    <Tooltip>\n      <TooltipTrigger asChild>{button}</TooltipTrigger>\n      <TooltipContent\n        side=\"right\"\n        align=\"center\"\n        hidden={state !== \"collapsed\" || isMobile}\n        {...tooltip}\n      />\n    </Tooltip>\n  )\n}\n\nfunction SidebarMenuAction({\n  className,\n  asChild = false,\n  showOnHover = false,\n  ...props\n}: React.ComponentProps<\"button\"> & {\n  asChild?: boolean\n  showOnHover?: boolean\n}) {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-action\"\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground peer-hover/menu-button:text-sidebar-accent-foreground absolute top-1.5 right-1 flex aspect-square w-5 items-center justify-center rounded-md p-0 outline-hidden transition-transform focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 md:after:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"peer-data-[active=true]/menu-button:text-sidebar-accent-foreground group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuBadge({\n  className,\n  ...props\n}: React.ComponentProps<\"div\">) {\n  return (\n    <div\n      data-slot=\"sidebar-menu-badge\"\n      data-sidebar=\"menu-badge\"\n      className={cn(\n        \"text-sidebar-foreground pointer-events-none absolute right-1 flex h-5 min-w-5 items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums select-none\",\n        \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSkeleton({\n  className,\n  showIcon = false,\n  ...props\n}: React.ComponentProps<\"div\"> & {\n  showIcon?: boolean\n}) {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      data-slot=\"sidebar-menu-skeleton\"\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[var(--skeleton-width)] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n}\n\nfunction SidebarMenuSub({ className, ...props }: React.ComponentProps<\"ul\">) {\n  return (\n    <ul\n      data-slot=\"sidebar-menu-sub\"\n      data-sidebar=\"menu-sub\"\n      className={cn(\n        \"border-sidebar-border mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l px-2.5 py-0.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubItem({\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) {\n  return (\n    <li\n      data-slot=\"sidebar-menu-sub-item\"\n      data-sidebar=\"menu-sub-item\"\n      className={cn(\"group/menu-sub-item relative\", className)}\n      {...props}\n    />\n  )\n}\n\nfunction SidebarMenuSubButton({\n  asChild = false,\n  size = \"md\",\n  isActive = false,\n  className,\n  ...props\n}: React.ComponentProps<\"a\"> & {\n  asChild?: boolean\n  size?: \"sm\" | \"md\"\n  isActive?: boolean\n}) {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      data-slot=\"sidebar-menu-sub-button\"\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"text-sidebar-foreground ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground active:bg-sidebar-accent active:text-sidebar-accent-foreground [&>svg]:text-sidebar-accent-foreground flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 outline outline-2 outline-transparent outline-offset-2 focus-visible:ring-2 disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":21846},"client/src/hooks/use-analytics.tsx":{"content":"import { useEffect, useRef } from 'react';\nimport { useLocation } from 'wouter';\nimport { trackPageView } from '../lib/analytics';\n\nexport const useAnalytics = () => {\n  const [location] = useLocation();\n  const prevLocationRef = useRef<string>(location);\n  \n  useEffect(() => {\n    if (location !== prevLocationRef.current) {\n      trackPageView(location);\n      prevLocationRef.current = location;\n    }\n  }, [location]);\n};\n","size_bytes":427},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/pages/achievements.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery } from \"@tanstack/react-query\";\nimport {\n  Award,\n  ExternalLink,\n  BookOpen,\n  Code,\n  Brain,\n  Loader2,\n} from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Tabs, TabsContent, TabsList, TabsTrigger } from \"@/components/ui/tabs\";\nimport type { Certificate, Skill } from \"@shared/schema\";\n\nexport default function Achievements() {\n  const [selectedCategory, setSelectedCategory] = useState(\"all\");\n\n  const { data: certificates, isLoading: certificatesLoading } = useQuery<\n    Certificate[]\n  >({\n    queryKey: [\"/api/certificates\"],\n  });\n\n  const { data: skills, isLoading: skillsLoading } = useQuery<Skill[]>({\n    queryKey: [\"/api/skills\"],\n  });\n\n  const categories = [\n    \"all\",\n    \"Microsoft\",\n    \"Google\",\n    \"Cloud\",\n    \"Data Analytics\",\n    \"Other\",\n  ];\n\n  const filteredCertificates =\n    selectedCategory === \"all\"\n      ? certificates\n      : certificates?.filter((cert) =>\n          cert.issuer.toLowerCase().includes(selectedCategory.toLowerCase())\n        );\n\n  const groupedSkills = skills?.reduce(\n    (acc, skill) => {\n      if (!acc[skill.category]) {\n        acc[skill.category] = [];\n      }\n      acc[skill.category].push(skill);\n      return acc;\n    },\n    {} as Record<string, Skill[]>\n  );\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Achievements & Skills\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Showcasing my certifications, skills, and continuous learning\n            journey\n          </p>\n        </div>\n\n        <Tabs defaultValue=\"certificates\" className=\"w-full\">\n          <TabsList className=\"grid w-full max-w-md mx-auto grid-cols-2 mb-12\">\n            <TabsTrigger value=\"certificates\" data-testid=\"tab-certificates\">\n              <Award className=\"h-4 w-4 mr-2\" />\n              Certifications\n            </TabsTrigger>\n            <TabsTrigger value=\"skills\" data-testid=\"tab-skills\">\n              <Code className=\"h-4 w-4 mr-2\" />\n              Skills\n            </TabsTrigger>\n          </TabsList>\n\n          <TabsContent value=\"certificates\">\n            {/* Certificate Stats */}\n            <div className=\"grid grid-cols-1 md:grid-cols-3 gap-6 mb-12\">\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <Award className=\"h-8 w-8 mx-auto mb-3 text-primary\" />\n                  <div className=\"text-3xl font-bold text-primary mb-1\">\n                    {certificates?.length || 0}+\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Total Certifications\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <BookOpen className=\"h-8 w-8 mx-auto mb-3 text-chart-2\" />\n                  <div className=\"text-3xl font-bold text-chart-2 mb-1\">\n                    {new Set(certificates?.map((c) => c.issuer)).size || 0}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Platforms\n                  </div>\n                </CardContent>\n              </Card>\n\n              <Card>\n                <CardContent className=\"p-6 text-center\">\n                  <Brain className=\"h-8 w-8 mx-auto mb-3 text-chart-3\" />\n                  <div className=\"text-3xl font-bold text-chart-3 mb-1\">\n                    {skills?.length || 0}+\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    Skills Mastered\n                  </div>\n                </CardContent>\n              </Card>\n            </div>\n\n            {/* Filter Tabs */}\n            <div className=\"flex flex-wrap gap-2 mb-8 justify-center\">\n              {categories.map((category) => (\n                <Button\n                  key={category}\n                  variant={selectedCategory === category ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => setSelectedCategory(category)}\n                  data-testid={`filter-${category.toLowerCase()}`}\n                  className=\"capitalize\"\n                >\n                  {category}\n                </Button>\n              ))}\n            </div>\n\n            {/* Certificates Grid */}\n            {certificatesLoading ? (\n              <div className=\"flex justify-center items-center py-20\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              </div>\n            ) : filteredCertificates && filteredCertificates.length > 0 ? (\n              <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n                {filteredCertificates.map((cert) => (\n                  <Card\n                    key={cert.id}\n                    className=\"hover-elevate transition-transform hover:-translate-y-1\"\n                    data-testid={`certificate-${cert.id}`}\n                  >\n                    <CardHeader>\n                      <div className=\"flex items-start justify-between gap-4 mb-2\">\n                        <Award className=\"h-6 w-6 text-primary flex-shrink-0\" />\n                        {cert.credentialUrl && (\n                          <a\n                            href={cert.credentialUrl}\n                            target=\"_blank\"\n                            rel=\"noopener noreferrer\"\n                            data-testid={`link-credential-${cert.id}`}\n                          >\n                            <Button\n                              variant=\"ghost\"\n                              size=\"icon\"\n                              className=\"h-8 w-8 hover-elevate active-elevate-2\"\n                            >\n                              <ExternalLink className=\"h-4 w-4\" />\n                            </Button>\n                          </a>\n                        )}\n                      </div>\n                      <CardTitle className=\"text-lg leading-tight\">\n                        {cert.title}\n                      </CardTitle>\n                    </CardHeader>\n                    <CardContent>\n                      <p className=\"text-muted-foreground mb-3\">{cert.issuer}</p>\n                      <div className=\"flex items-center justify-between mb-3\">\n                        <Badge variant=\"secondary\" className=\"text-xs\">\n                          {cert.issueDate}\n                        </Badge>\n                        {cert.credentialId && (\n                          <span className=\"text-xs text-muted-foreground font-mono\">\n                            ID: {cert.credentialId.substring(0, 8)}...\n                          </span>\n                        )}\n                      </div>\n                      <div className=\"flex flex-wrap gap-2\">\n                        {cert.skills.slice(0, 3).map((skill, idx) => (\n                          <Badge\n                            key={idx}\n                            variant=\"outline\"\n                            className=\"text-xs\"\n                          >\n                            {skill}\n                          </Badge>\n                        ))}\n                      </div>\n                    </CardContent>\n                  </Card>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-20\">\n                <Award className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n                <p className=\"text-muted-foreground\">\n                  No certifications found in this category.\n                </p>\n              </div>\n            )}\n          </TabsContent>\n\n          <TabsContent value=\"skills\">\n            {skillsLoading ? (\n              <div className=\"flex justify-center items-center py-20\">\n                <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n              </div>\n            ) : groupedSkills && Object.keys(groupedSkills).length > 0 ? (\n              <div className=\"space-y-12\">\n                {Object.entries(groupedSkills).map(([category, categorySkills]) => (\n                  <div key={category}>\n                    <h2 className=\"text-2xl font-bold mb-6 capitalize\">\n                      {category}\n                    </h2>\n                    <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4\">\n                      {categorySkills.map((skill) => (\n                        <Card\n                          key={skill.id}\n                          className=\"hover-elevate transition-transform hover:-translate-y-1\"\n                          data-testid={`skill-${skill.id}`}\n                        >\n                          <CardContent className=\"p-4 flex items-center justify-between\">\n                            <div>\n                              <h3 className=\"font-semibold mb-1\">{skill.name}</h3>\n                              <Badge\n                                variant=\"secondary\"\n                                className=\"text-xs capitalize\"\n                              >\n                                {skill.level}\n                              </Badge>\n                            </div>\n                            <Code className=\"h-5 w-5 text-primary\" />\n                          </CardContent>\n                        </Card>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            ) : (\n              <div className=\"text-center py-20\">\n                <Code className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n                <p className=\"text-muted-foreground\">No skills added yet.</p>\n              </div>\n            )}\n          </TabsContent>\n        </Tabs>\n      </div>\n    </div>\n  );\n}\n","size_bytes":10150},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"client/src/pages/admin-social-links.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { Plus, Pencil, Trash2, ArrowLeft, Loader2 } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Input } from \"@/components/ui/input\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  Form,\n  FormControl,\n  FormField,\n  FormItem,\n  FormLabel,\n  FormMessage,\n  FormDescription,\n} from \"@/components/ui/form\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest, queryClient } from \"@/lib/queryClient\";\nimport { insertSocialLinkSchema, type InsertSocialLink, type SocialLink } from \"@shared/schema\";\n\nexport default function AdminSocialLinks() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingLink, setEditingLink] = useState<SocialLink | null>(null);\n\n  const { data: socialLinks, isLoading } = useQuery<SocialLink[]>({\n    queryKey: [\"/api/social-links\"],\n  });\n\n  const form = useForm<InsertSocialLink>({\n    resolver: zodResolver(insertSocialLinkSchema),\n    defaultValues: {\n      platform: \"\",\n      url: \"\",\n      icon: \"Share2\",\n      handle: \"\",\n      order: \"0\",\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertSocialLink) => {\n      return await apiRequest(\"POST\", \"/api/social-links\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/social-links\"] });\n      toast({ title: \"Social link created successfully\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertSocialLink }) => {\n      return await apiRequest(\"PATCH\", `/api/social-links/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/social-links\"] });\n      toast({ title: \"Social link updated successfully\" });\n      setDialogOpen(false);\n      setEditingLink(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/social-links/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/social-links\"] });\n      toast({ title: \"Social link deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (link: SocialLink) => {\n    setEditingLink(link);\n    form.reset({\n      platform: link.platform,\n      url: link.url,\n      icon: link.icon,\n      handle: link.handle || \"\",\n      order: link.order,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertSocialLink) => {\n    if (editingLink) {\n      updateMutation.mutate({ id: editingLink.id, data });\n    } else {\n      createMutation.mutate(data);\n    }\n  };\n\n  const sortedLinks = socialLinks?.sort(\n    (a, b) => parseInt(a.order) - parseInt(b.order)\n  );\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        <div className=\"flex items-center justify-between mb-8\">\n          <div>\n            <Link href=\"/admin\">\n              <Button variant=\"ghost\" size=\"sm\" className=\"mb-2\" data-testid=\"link-back\">\n                <ArrowLeft className=\"h-4 w-4 mr-2\" />\n                Back to Dashboard\n              </Button>\n            </Link>\n            <h1 className=\"text-4xl font-bold\">Manage Social Links</h1>\n          </div>\n\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button onClick={() => { setEditingLink(null); form.reset(); }} data-testid=\"button-add-social-link\">\n                <Plus className=\"h-4 w-4 mr-2\" />\n                Add Social Link\n              </Button>\n            </DialogTrigger>\n            <DialogContent>\n              <DialogHeader>\n                <DialogTitle>\n                  {editingLink ? \"Edit Social Link\" : \"Add New Social Link\"}\n                </DialogTitle>\n              </DialogHeader>\n              <Form {...form}>\n                <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                  <FormField\n                    control={form.control}\n                    name=\"platform\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Platform Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"e.g., LinkedIn, GitHub\" data-testid=\"input-platform\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"url\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>URL</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"https://...\" data-testid=\"input-url\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"handle\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Handle/Username (Optional)</FormLabel>\n                        <FormControl>\n                          <Input {...field} placeholder=\"@username\" data-testid=\"input-handle\" />\n                        </FormControl>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"icon\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Icon Name</FormLabel>\n                        <FormControl>\n                          <Input {...field} data-testid=\"input-icon\" />\n                        </FormControl>\n                        <FormDescription>\n                          Use Lucide icon names (e.g., Linkedin, Github, Mail, Twitter)\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <FormField\n                    control={form.control}\n                    name=\"order\"\n                    render={({ field }) => (\n                      <FormItem>\n                        <FormLabel>Display Order</FormLabel>\n                        <FormControl>\n                          <Input {...field} type=\"number\" data-testid=\"input-order\" />\n                        </FormControl>\n                        <FormDescription>\n                          Lower numbers appear first\n                        </FormDescription>\n                        <FormMessage />\n                      </FormItem>\n                    )}\n                  />\n\n                  <Button type=\"submit\" className=\"w-full\" disabled={createMutation.isPending || updateMutation.isPending} data-testid=\"button-submit\">\n                    {(createMutation.isPending || updateMutation.isPending) ? \"Saving...\" : \"Save Social Link\"}\n                  </Button>\n                </form>\n              </Form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin\" />\n          </div>\n        ) : sortedLinks && sortedLinks.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6\">\n            {sortedLinks.map((link) => (\n              <Card key={link.id} data-testid={`social-link-card-${link.id}`}>\n                <CardContent className=\"p-6\">\n                  <div className=\"flex items-center justify-between mb-4\">\n                    <div>\n                      <h3 className=\"font-semibold text-lg\">{link.platform}</h3>\n                      {link.handle && (\n                        <p className=\"text-sm text-muted-foreground\">{link.handle}</p>\n                      )}\n                    </div>\n                    <div className=\"text-xs text-muted-foreground\">\n                      Order: {link.order}\n                    </div>\n                  </div>\n                  <p className=\"text-sm text-muted-foreground mb-4 truncate\">\n                    {link.url}\n                  </p>\n                  <div className=\"flex gap-2\">\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => handleEdit(link)}\n                      data-testid={`button-edit-${link.id}`}\n                    >\n                      <Pencil className=\"h-4 w-4 mr-2\" />\n                      Edit\n                    </Button>\n                    <Button\n                      size=\"sm\"\n                      variant=\"outline\"\n                      onClick={() => deleteMutation.mutate(link.id)}\n                      disabled={deleteMutation.isPending}\n                      data-testid={`button-delete-${link.id}`}\n                    >\n                      <Trash2 className=\"h-4 w-4 mr-2\" />\n                      Delete\n                    </Button>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground\">No social links yet. Add your first one!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":10040},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/env.d.ts":{"content":"/// <reference types=\"vite/client\" />\n\ninterface ImportMetaEnv {\n  readonly VITE_GA_MEASUREMENT_ID: string;\n}\n\ninterface ImportMeta {\n  readonly env: ImportMetaEnv;\n}\n","size_bytes":167},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(`\n      after:content-[''] after:block after:absolute after:inset-0 after:rounded-full after:pointer-events-none after:border after:border-black/10 dark:after:border-white/10\n      relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full`,\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1592},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Linkedin, Github, Mail, MapPin } from \"lucide-react\";\n\nexport function Footer() {\n  const currentYear = new Date().getFullYear();\n\n  return (\n    <footer className=\"w-full border-t bg-card\">\n      <div className=\"container mx-auto px-4 lg:px-8 py-12\">\n        <div className=\"grid grid-cols-1 md:grid-cols-3 gap-8\">\n          <div>\n            <h3 className=\"text-lg font-bold mb-4\">\n              Kartik<span className=\"text-primary\">.</span>\n            </h3>\n            <p className=\"text-sm text-muted-foreground leading-relaxed\">\n              BCA Student | Aspiring Software Developer | Passionate About\n              Coding & Problem-Solving\n            </p>\n          </div>\n\n          <div>\n            <h4 className=\"text-sm font-semibold mb-4\">Quick Links</h4>\n            <div className=\"flex flex-col gap-2\">\n              <Link href=\"/about\">\n                <a className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md -ml-2\" data-testid=\"link-footer-about\">\n                  About\n                </a>\n              </Link>\n              <Link href=\"/projects\">\n                <a className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md -ml-2\" data-testid=\"link-footer-projects\">\n                  Projects\n                </a>\n              </Link>\n              <Link href=\"/services\">\n                <a className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md -ml-2\" data-testid=\"link-footer-services\">\n                  Services\n                </a>\n              </Link>\n              <Link href=\"/contact\">\n                <a className=\"text-sm text-muted-foreground hover:text-foreground transition-colors hover-elevate px-2 py-1 rounded-md -ml-2\" data-testid=\"link-footer-contact\">\n                  Contact\n                </a>\n              </Link>\n            </div>\n          </div>\n\n          <div>\n            <h4 className=\"text-sm font-semibold mb-4\">Contact Info</h4>\n            <div className=\"flex flex-col gap-3\">\n              <a\n                href=\"https://linkedin.com/in/kartik-sharma06\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center gap-2 hover-elevate px-2 py-1 rounded-md -ml-2\"\n                data-testid=\"link-footer-linkedin\"\n              >\n                <Linkedin className=\"h-4 w-4\" />\n                linkedin.com/in/kartik-sharma06\n              </a>\n              <a\n                href=\"mailto:kartik@example.com\"\n                className=\"text-sm text-muted-foreground hover:text-foreground transition-colors flex items-center gap-2 hover-elevate px-2 py-1 rounded-md -ml-2\"\n                data-testid=\"link-footer-email\"\n              >\n                <Mail className=\"h-4 w-4\" />\n                Get in touch\n              </a>\n              <div className=\"text-sm text-muted-foreground flex items-center gap-2 px-2 py-1 -ml-2\">\n                <MapPin className=\"h-4 w-4\" />\n                Jaipur, Rajasthan, India\n              </div>\n            </div>\n          </div>\n        </div>\n\n        <div className=\"mt-8 pt-8 border-t text-center\">\n          <p className=\"text-sm text-muted-foreground\">\n            © {currentYear} Kartik Sharma. All rights reserved.\n          </p>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":3562},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/auth.ts":{"content":"import passport from \"passport\";\nimport { Strategy as LocalStrategy } from \"passport-local\";\nimport { Express } from \"express\";\nimport session from \"express-session\";\nimport { scrypt, randomBytes, timingSafeEqual } from \"crypto\";\nimport { promisify } from \"util\";\nimport { storage } from \"./storage\";\nimport { User as SelectUser } from \"@shared/schema\";\n\ndeclare global {\n  namespace Express {\n    interface User extends SelectUser {}\n  }\n}\n\nconst scryptAsync = promisify(scrypt);\n\nasync function hashPassword(password: string) {\n  const salt = randomBytes(16).toString(\"hex\");\n  const buf = (await scryptAsync(password, salt, 64)) as Buffer;\n  return `${buf.toString(\"hex\")}.${salt}`;\n}\n\nasync function comparePasswords(supplied: string, stored: string) {\n  const [hashed, salt] = stored.split(\".\");\n  const hashedBuf = Buffer.from(hashed, \"hex\");\n  const suppliedBuf = (await scryptAsync(supplied, salt, 64)) as Buffer;\n  return timingSafeEqual(hashedBuf, suppliedBuf);\n}\n\nexport function ensureAuthenticated(req: any, res: any, next: any) {\n  if (req.isAuthenticated()) {\n    return next();\n  }\n  res.status(401).json({ error: \"Authentication required\" });\n}\n\nexport function setupAuth(app: Express) {\n  if (!process.env.SESSION_SECRET) {\n    throw new Error(\"SESSION_SECRET environment variable is required\");\n  }\n\n  const sessionSettings: session.SessionOptions = {\n    secret: process.env.SESSION_SECRET,\n    resave: false,\n    saveUninitialized: false,\n    store: storage.sessionStore,\n    cookie: {\n      maxAge: 1000 * 60 * 60 * 24 * 7,\n      httpOnly: true,\n      secure: process.env.NODE_ENV === \"production\",\n    },\n  };\n\n  app.set(\"trust proxy\", 1);\n  app.use(session(sessionSettings));\n  app.use(passport.initialize());\n  app.use(passport.session());\n\n  passport.use(\n    new LocalStrategy(async (username, password, done) => {\n      const user = await storage.getUserByUsername(username);\n      if (!user || !(await comparePasswords(password, user.password))) {\n        return done(null, false);\n      } else {\n        return done(null, user);\n      }\n    }),\n  );\n\n  passport.serializeUser((user, done) => done(null, user.id));\n  passport.deserializeUser(async (id: number, done) => {\n    const user = await storage.getUser(id);\n    done(null, user);\n  });\n\n  app.post(\"/api/register\", async (req, res, next) => {\n    if (!process.env.ADMIN_REGISTRATION_SECRET) {\n      return res.status(403).send(\"Registration is disabled\");\n    }\n\n    if (req.body.registrationSecret !== process.env.ADMIN_REGISTRATION_SECRET) {\n      return res.status(403).send(\"Invalid registration secret\");\n    }\n\n    const existingUser = await storage.getUserByUsername(req.body.username);\n    if (existingUser) {\n      return res.status(400).send(\"Username already exists\");\n    }\n\n    const user = await storage.createUser({\n      username: req.body.username,\n      password: await hashPassword(req.body.password),\n    });\n\n    req.login(user, (err) => {\n      if (err) return next(err);\n      res.status(201).json(user);\n    });\n  });\n\n  app.post(\"/api/login\", passport.authenticate(\"local\"), (req, res) => {\n    res.status(200).json(req.user);\n  });\n\n  app.post(\"/api/logout\", (req, res, next) => {\n    req.logout((err) => {\n      if (err) return next(err);\n      res.sendStatus(200);\n    });\n  });\n\n  app.get(\"/api/user\", (req, res) => {\n    if (!req.isAuthenticated()) return res.sendStatus(401);\n    res.json(req.user);\n  });\n}\n","size_bytes":3426},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/pages/about.tsx":{"content":"import { GraduationCap, Briefcase, MapPin, Mail } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function About() {\n  const education = [\n    {\n      institution: \"Vivekananda Global University\",\n      degree: \"Bachelor in Computer Applications (BCA)\",\n      specialization: \"Full Stack and Cloud Computing\",\n      duration: \"Sep 2024 - Jul 2027\",\n      grade: \"9.43 CGPA\",\n    },\n    {\n      institution: \"A.S. Public Senior Secondary School\",\n      degree: \"12th Grade\",\n      specialization: \"Science (Mathematics)\",\n      duration: \"Completed\",\n      grade: \"96%\",\n    },\n  ];\n\n  const experience = [\n    {\n      role: \"Computer Teacher\",\n      company: \"Anukriti Prakashan\",\n      type: \"Part-time\",\n      duration: \"Mar 2025 - Present\",\n      location: \"Jaipur, Rajasthan, India\",\n      description:\n        \"Teaching computer fundamentals and modern technologies to students, developing curriculum materials, and fostering digital literacy.\",\n    },\n    {\n      role: \"Computer Teacher\",\n      company: \"InfoSphere\",\n      type: \"Part-time\",\n      duration: \"Sep 2024 - Aug 2025\",\n      location: \"Jaipur, Rajasthan, India\",\n      description:\n        \"Taught the RS-CIT course, focusing on computer fundamentals and digital literacy. Designed engaging lessons and provided hands-on training.\",\n    },\n    {\n      role: \"Back End Developer\",\n      company: \"Zenz Aawara\",\n      type: \"Internship\",\n      duration: \"May 2025 - Jul 2025\",\n      location: \"Jaipur, Rajasthan, India (Hybrid)\",\n      description:\n        \"Contributed to backend development by designing and optimizing server-side code while building RESTful APIs for effective data management.\",\n    },\n  ];\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-6xl\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">About Me</h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto leading-relaxed\">\n            I am currently pursuing my Bachelor of Computer Applications (BCA),\n            where I am building a strong foundation in programming, computer\n            science concepts, and modern technologies.\n          </p>\n        </div>\n\n        {/* Professional Summary */}\n        <Card className=\"mb-12\">\n          <CardHeader>\n            <CardTitle className=\"flex items-center gap-2\">\n              <Mail className=\"h-5 w-5 text-primary\" />\n              Professional Summary\n            </CardTitle>\n          </CardHeader>\n          <CardContent className=\"space-y-4 text-muted-foreground leading-relaxed\">\n            <p>\n              My academic curriculum has provided me with exposure to\n              programming languages such as C, Python, and Java, as well as\n              practical knowledge in web development, database management, and\n              cloud computing.\n            </p>\n            <p>\n              I am passionate about applying my theoretical knowledge to\n              real-world projects. I have gained hands-on experience through\n              internships and teaching roles, where I've developed both\n              technical expertise and communication skills.\n            </p>\n            <p>\n              I'm actively seeking opportunities to contribute to innovative\n              projects, expand my skill set, and grow as a professional in the\n              tech industry.\n            </p>\n          </CardContent>\n        </Card>\n\n        {/* Education */}\n        <section className=\"mb-12\">\n          <div className=\"flex items-center gap-2 mb-6\">\n            <GraduationCap className=\"h-6 w-6 text-primary\" />\n            <h2 className=\"text-3xl font-bold\">Education</h2>\n          </div>\n\n          <div className=\"space-y-6\">\n            {education.map((edu, index) => (\n              <Card\n                key={index}\n                className=\"hover-elevate transition-transform hover:-translate-y-1\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4 mb-3\">\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-1\">\n                        {edu.institution}\n                      </h3>\n                      <p className=\"text-muted-foreground\">{edu.degree}</p>\n                      {edu.specialization && (\n                        <p className=\"text-sm text-muted-foreground\">\n                          {edu.specialization}\n                        </p>\n                      )}\n                    </div>\n                    <div className=\"flex flex-col items-start md:items-end gap-2\">\n                      <Badge variant=\"secondary\">{edu.duration}</Badge>\n                      <Badge className=\"bg-chart-2 hover:bg-chart-2\">\n                        Grade: {edu.grade}\n                      </Badge>\n                    </div>\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Experience */}\n        <section>\n          <div className=\"flex items-center gap-2 mb-6\">\n            <Briefcase className=\"h-6 w-6 text-primary\" />\n            <h2 className=\"text-3xl font-bold\">Experience</h2>\n          </div>\n\n          <div className=\"space-y-6\">\n            {experience.map((exp, index) => (\n              <Card\n                key={index}\n                className=\"hover-elevate transition-transform hover:-translate-y-1\"\n              >\n                <CardContent className=\"p-6\">\n                  <div className=\"flex flex-col md:flex-row md:items-start md:justify-between gap-4 mb-3\">\n                    <div>\n                      <h3 className=\"text-xl font-semibold mb-1\">{exp.role}</h3>\n                      <p className=\"text-lg text-muted-foreground mb-1\">\n                        {exp.company}\n                      </p>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <MapPin className=\"h-4 w-4\" />\n                        {exp.location}\n                      </div>\n                    </div>\n                    <div className=\"flex flex-col items-start md:items-end gap-2\">\n                      <Badge variant=\"secondary\">{exp.duration}</Badge>\n                      <Badge variant=\"outline\">{exp.type}</Badge>\n                    </div>\n                  </div>\n                  <p className=\"text-muted-foreground leading-relaxed\">\n                    {exp.description}\n                  </p>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </section>\n\n        {/* Location */}\n        <Card className=\"mt-12 bg-gradient-to-br from-primary/5 to-chart-2/5\">\n          <CardContent className=\"p-8 text-center\">\n            <MapPin className=\"h-8 w-8 mx-auto mb-4 text-primary\" />\n            <h3 className=\"text-2xl font-bold mb-2\">Based in Jaipur</h3>\n            <p className=\"text-muted-foreground\">\n              Rajasthan, India • Open to remote and on-site opportunities\n            </p>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":7358},"client/src/pages/home.tsx":{"content":"import { useEffect, useState } from \"react\";\nimport { Link } from \"wouter\";\nimport { ArrowDown, Github, Linkedin, Mail, Download } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Home() {\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    setIsVisible(true);\n  }, []);\n\n  const stats = [\n    { label: \"Years of Study\", value: \"2+\" },\n    { label: \"Certifications\", value: \"16+\" },\n    { label: \"Projects\", value: \"5+\" },\n    { label: \"CGPA\", value: \"9.43\" },\n  ];\n\n  const skills = [\n    \"Software Development\",\n    \"Web Development\",\n    \"Python\",\n    \"Java\",\n    \"C\",\n    \"Cloud Computing\",\n    \"AI Prompting\",\n    \"Microsoft Office\",\n  ];\n\n  return (\n    <div className=\"min-h-screen\">\n      {/* Hero Section */}\n      <section className=\"relative min-h-[calc(100vh-4rem)] flex items-center justify-center overflow-hidden\">\n        {/* Animated background */}\n        <div className=\"absolute inset-0 bg-gradient-to-br from-primary/5 via-background to-chart-2/5 -z-10\" />\n        <div className=\"absolute inset-0 bg-[radial-gradient(circle_at_50%_120%,rgba(120,119,198,0.1),rgba(255,255,255,0))] -z-10\" />\n\n        <div\n          className={`container mx-auto px-4 lg:px-8 py-20 transition-all duration-1000 ${\n            isVisible ? \"opacity-100 translate-y-0\" : \"opacity-0 translate-y-10\"\n          }`}\n        >\n          <div className=\"max-w-4xl mx-auto text-center\">\n            {/* Profile Image Placeholder */}\n<div className=\"mb-8 flex justify-center\">\n  <div className=\"relative\">\n    {/* KS वाले div को इस img टैग से बदलें */}\n    <img\n      src=\"/favicon.png\" // <-- अपनी इमेज का सही पाथ या URL यहाँ डालें\n      alt=\"Kartik Sharma\"\n      className=\"w-32 h-32 rounded-full object-cover shadow-xl\" // स्टाइलिंग के लिए क्लासेज\n    />\n    <div className=\"absolute inset-0 w-32 h-32 rounded-full bg-gradient-to-br from-primary to-chart-2 opacity-30 blur-xl animate-pulse -z-10\" /> {/* z-index जोड़ा ताकि इमेज के पीछे रहे */}\n  </div>\n</div>\n\n            <h1 className=\"text-5xl md:text-6xl lg:text-7xl font-bold tracking-tight mb-6\">\n              Hi, I'm{\" \"}\n              <span className=\"bg-gradient-to-r from-primary to-chart-2 bg-clip-text text-transparent\">\n                Kartik Sharma\n              </span>\n            </h1>\n\n            <p className=\"text-xl md:text-2xl text-muted-foreground mb-4\">\n              Kartik Sharma Jaipur | Software Developer | Freelancer\n            </p>\n\n            <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto mb-8 leading-relaxed\">\n              Software Developer & Freelancer in Jaipur, turning complex problems into elegant digital solutions. Explore my work and let's build something amazing together.\n            </p>\n\n            {/* CTA Buttons */}\n            <div className=\"flex flex-wrap gap-4 justify-center mb-12\">\n              <Link href=\"/projects\">\n                <Button size=\"lg\" data-testid=\"button-view-projects\">\n                  View My Work\n                </Button>\n              </Link>\n              <Link href=\"/contact\">\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  data-testid=\"button-contact-me\"\n                >\n                  Contact Me\n                </Button>\n              </Link>\n            </div>\n\n            {/* Social Links */}\n            <div className=\"flex gap-4 justify-center mb-8\">\n              <a\n                href=\"https://linkedin.com/in/kartik-sharma06\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                data-testid=\"link-linkedin\"\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"hover-elevate active-elevate-2\"\n                >\n                  <Linkedin className=\"h-5 w-5\" />\n                </Button>\n              </a>\n              <a\n                href=\"https://github.com/kartiksharma4448\"\n                target=\"_blank\"\n                rel=\"noopener noreferrer\"\n                data-testid=\"link-github\"\n              >\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"hover-elevate active-elevate-2\"\n                >\n                  <Github className=\"h-5 w-5\" />\n                </Button>\n              </a>\n              <Link href=\"/contact\">\n                <Button\n                  variant=\"ghost\"\n                  size=\"icon\"\n                  className=\"hover-elevate active-elevate-2\"\n                  data-testid=\"button-email-icon\"\n                >\n                  <Mail className=\"h-5 w-5\" />\n                </Button>\n              </Link>\n            </div>\n\n            {/* Scroll Indicator */}\n            <div className=\"animate-bounce\">\n              <ArrowDown className=\"h-6 w-6 mx-auto text-muted-foreground\" />\n            </div>\n          </div>\n        </div>\n      </section>\n\n      {/* Stats Section */}\n      <section className=\"py-16 bg-card\">\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"grid grid-cols-2 md:grid-cols-4 gap-6\">\n            {stats.map((stat, index) => (\n              <Card\n                key={index}\n                className=\"hover-elevate transition-transform hover:-translate-y-1\"\n              >\n                <CardContent className=\"p-6 text-center\">\n                  <div className=\"text-3xl md:text-4xl font-bold text-primary mb-2\">\n                    {stat.value}\n                  </div>\n                  <div className=\"text-sm text-muted-foreground\">\n                    {stat.label}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        </div>\n      </section>\n\n      {/* Skills Preview */}\n      <section className=\"py-20\">\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Core Skills\n            </h2>\n            <p className=\"text-muted-foreground mb-8\">\n              Technologies and tools I work with\n            </p>\n\n            <div className=\"flex flex-wrap gap-3 justify-center mb-8\">\n              {skills.map((skill, index) => (\n                <Badge\n                  key={index}\n                  variant=\"secondary\"\n                  className=\"px-4 py-2 text-sm hover-elevate transition-transform hover:-translate-y-1\"\n                >\n                  {skill}\n                </Badge>\n              ))}\n            </div>\n\n            <Link href=\"/achievements\">\n              <Button variant=\"outline\" data-testid=\"button-view-all-skills\">\n                View All Skills & Certifications\n              </Button>\n            </Link>\n          </div>\n        </div>\n      </section>\n\n      {/* CTA Section */}\n      <section className=\"py-20 bg-gradient-to-br from-primary/10 via-background to-chart-2/10\">\n        <div className=\"container mx-auto px-4 lg:px-8\">\n          <div className=\"max-w-3xl mx-auto text-center\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\">\n              Let's Work Together\n            </h2>\n            <p className=\"text-lg text-muted-foreground mb-8\">\n              I'm open to internship opportunities, freelance projects, and\n              collaboration. Let's build something amazing!\n            </p>\n            <div className=\"flex flex-wrap gap-4 justify-center\">\n              <Link href=\"/contact\">\n                <Button size=\"lg\" data-testid=\"button-get-in-touch\">\n                  Get In Touch\n                </Button>\n              </Link>\n              <Link href=\"/services\">\n                <Button\n                  size=\"lg\"\n                  variant=\"outline\"\n                  data-testid=\"button-view-services\"\n                >\n                  View Services\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </div>\n      </section>\n    </div>\n  );\n}\n","size_bytes":8373},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      borderRadius: {\n        lg: \".5625rem\", /* 9px */\n        md: \".375rem\", /* 6px */\n        sm: \".1875rem\", /* 3px */\n      },\n      colors: {\n        // Flat / base colors (regular buttons)\n        background: \"hsl(var(--background) / <alpha-value>)\",\n        foreground: \"hsl(var(--foreground) / <alpha-value>)\",\n        border: \"hsl(var(--border) / <alpha-value>)\",\n        input: \"hsl(var(--input) / <alpha-value>)\",\n        card: {\n          DEFAULT: \"hsl(var(--card) / <alpha-value>)\",\n          foreground: \"hsl(var(--card-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--card-border) / <alpha-value>)\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover) / <alpha-value>)\",\n          foreground: \"hsl(var(--popover-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--popover-border) / <alpha-value>)\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--primary-foreground) / <alpha-value>)\",\n          border: \"var(--primary-border)\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary) / <alpha-value>)\",\n          foreground: \"hsl(var(--secondary-foreground) / <alpha-value>)\",\n          border: \"var(--secondary-border)\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted) / <alpha-value>)\",\n          foreground: \"hsl(var(--muted-foreground) / <alpha-value>)\",\n          border: \"var(--muted-border)\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--accent-foreground) / <alpha-value>)\",\n          border: \"var(--accent-border)\",\n        },\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive) / <alpha-value>)\",\n          foreground: \"hsl(var(--destructive-foreground) / <alpha-value>)\",\n          border: \"var(--destructive-border)\",\n        },\n        ring: \"hsl(var(--ring) / <alpha-value>)\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1) / <alpha-value>)\",\n          \"2\": \"hsl(var(--chart-2) / <alpha-value>)\",\n          \"3\": \"hsl(var(--chart-3) / <alpha-value>)\",\n          \"4\": \"hsl(var(--chart-4) / <alpha-value>)\",\n          \"5\": \"hsl(var(--chart-5) / <alpha-value>)\",\n        },\n        sidebar: {\n          ring: \"hsl(var(--sidebar-ring) / <alpha-value>)\",\n          DEFAULT: \"hsl(var(--sidebar) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-foreground) / <alpha-value>)\",\n          border: \"hsl(var(--sidebar-border) / <alpha-value>)\",\n        },\n        \"sidebar-primary\": {\n          DEFAULT: \"hsl(var(--sidebar-primary) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-primary-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-primary-border)\",\n        },\n        \"sidebar-accent\": {\n          DEFAULT: \"hsl(var(--sidebar-accent) / <alpha-value>)\",\n          foreground: \"hsl(var(--sidebar-accent-foreground) / <alpha-value>)\",\n          border: \"var(--sidebar-accent-border)\"\n        },\n        status: {\n          online: \"rgb(34 197 94)\",\n          away: \"rgb(245 158 11)\",\n          busy: \"rgb(239 68 68)\",\n          offline: \"rgb(156 163 175)\",\n        },\n      },\n      fontFamily: {\n        sans: [\"var(--font-sans)\"],\n        serif: [\"var(--font-serif)\"],\n        mono: [\"var(--font-mono)\"],\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: { height: \"0\" },\n          to: { height: \"var(--radix-accordion-content-height)\" },\n        },\n        \"accordion-up\": {\n          from: { height: \"var(--radix-accordion-content-height)\" },\n          to: { height: \"0\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":4050},"client/src/index.css":{"content":"@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n/* LIGHT MODE */\n:root {\n  --button-outline: rgba(0,0,0, .10);\n  --badge-outline: rgba(0,0,0, .05);\n\n  /* Automatic computation of border around primary / danger buttons */\n  --opaque-button-border-intensity: -8; /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(0,0,0, .03);\n  --elevate-2: rgba(0,0,0, .08);\n\n  --background: 0 0% 100%;\n\n  --foreground: 222 15% 12%;\n\n  --border: 0 0% 89%;\n\n  --card: 0 0% 98%;\n\n  --card-foreground: 222 15% 12%;\n\n  --card-border: 0 0% 94%;\n\n  --sidebar: 0 0% 96%;\n\n  --sidebar-foreground: 222 15% 12%;\n\n  --sidebar-border: 0 0% 92%;\n\n  --sidebar-primary: 217 91% 50%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 0 0% 93%;\n\n  --sidebar-accent-foreground: 222 15% 12%;\n\n  --sidebar-ring: 217 91% 50%;\n\n  --popover: 0 0% 96%;\n\n  --popover-foreground: 222 15% 12%;\n\n  --popover-border: 0 0% 92%;\n\n  --primary: 217 91% 50%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 0 0% 94%;\n\n  --secondary-foreground: 222 15% 12%;\n\n  --muted: 0 0% 96%;\n\n  --muted-foreground: 222 8% 45%;\n\n  --accent: 217 20% 94%;\n\n  --accent-foreground: 222 15% 12%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 0 0% 80%;\n  --ring: 217 91% 50%;\n  --chart-1: 217 91% 50%;\n  --chart-2: 142 71% 40%;\n  --chart-3: 199 89% 48%;\n  --chart-4: 38 92% 50%;\n  --chart-5: 0 72% 51%;\n\n  --font-sans: 'Inter', system-ui, sans-serif;\n  --font-serif: Georgia, serif;\n  --font-mono: 'JetBrains Mono', 'Fira Code', monospace;\n  --radius: .5rem; /* 8px */\n  --shadow-2xs: 0px 1px 2px 0px hsl(222 15% 12% / 0.05);\n  --shadow-xs: 0px 1px 3px 0px hsl(222 15% 12% / 0.08);\n  --shadow-sm: 0px 2px 4px 0px hsl(222 15% 12% / 0.06), 0px 1px 2px -1px hsl(222 15% 12% / 0.04);\n  --shadow: 0px 4px 6px 0px hsl(222 15% 12% / 0.07), 0px 2px 4px -1px hsl(222 15% 12% / 0.05);\n  --shadow-md: 0px 6px 12px 0px hsl(222 15% 12% / 0.08), 0px 4px 8px -2px hsl(222 15% 12% / 0.06);\n  --shadow-lg: 0px 10px 20px 0px hsl(222 15% 12% / 0.10), 0px 6px 12px -2px hsl(222 15% 12% / 0.08);\n  --shadow-xl: 0px 16px 32px 0px hsl(222 15% 12% / 0.12), 0px 8px 16px -4px hsl(222 15% 12% / 0.10);\n  --shadow-2xl: 0px 24px 48px 0px hsl(222 15% 12% / 0.15);\n  --tracking-normal: 0em;\n  --spacing: 0.25rem;\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n\n  /* Fallback for older browsers */\n  --sidebar-primary-border: hsl(var(--sidebar-primary));\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --sidebar-accent-border: hsl(var(--sidebar-accent));\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --primary-border: hsl(var(--primary));\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --secondary-border: hsl(var(--secondary));\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --muted-border: hsl(var(--muted));\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --accent-border: hsl(var(--accent));\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n\n  /* Fallback for older browsers */\n  --destructive-border: hsl(var(--destructive));\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n.dark {\n  --button-outline: rgba(255,255,255, .10);\n  --badge-outline: rgba(255,255,255, .05);\n\n  --opaque-button-border-intensity: 9;  /* In terms of percentages */\n\n  /* Backgrounds applied on top of other backgrounds when hovered/active */\n  --elevate-1: rgba(255,255,255, .04);\n  --elevate-2: rgba(255,255,255, .09);\n\n  --background: 222 15% 8%;\n\n  --foreground: 0 0% 98%;\n\n  --border: 222 10% 20%;\n\n  --card: 222 13% 12%;\n\n  --card-foreground: 0 0% 98%;\n\n  --card-border: 222 12% 14%;\n\n  --sidebar: 222 12% 16%;\n\n  --sidebar-foreground: 0 0% 98%;\n\n  --sidebar-border: 222 12% 18%;\n\n  --sidebar-primary: 217 91% 60%;\n\n  --sidebar-primary-foreground: 0 0% 98%;\n\n  --sidebar-accent: 222 12% 18%;\n\n  --sidebar-accent-foreground: 0 0% 98%;\n\n  --sidebar-ring: 217 91% 60%;\n\n  --popover: 222 12% 16%;\n\n  --popover-foreground: 0 0% 98%;\n\n  --popover-border: 222 12% 18%;\n\n  --primary: 217 91% 60%;\n\n  --primary-foreground: 0 0% 98%;\n\n  --secondary: 222 12% 20%;\n\n  --secondary-foreground: 0 0% 98%;\n\n  --muted: 222 10% 18%;\n\n  --muted-foreground: 0 0% 71%;\n\n  --accent: 217 18% 20%;\n\n  --accent-foreground: 0 0% 98%;\n\n  --destructive: 0 72% 51%;\n\n  --destructive-foreground: 0 0% 98%;\n\n  --input: 222 12% 30%;\n  --ring: 217 91% 60%;\n  --chart-1: 217 91% 65%;\n  --chart-2: 142 71% 55%;\n  --chart-3: 199 89% 58%;\n  --chart-4: 38 92% 60%;\n  --chart-5: 0 72% 61%;\n\n  --shadow-2xs: 0px 1px 2px 0px hsl(0 0% 0% / 0.20);\n  --shadow-xs: 0px 1px 3px 0px hsl(0 0% 0% / 0.25);\n  --shadow-sm: 0px 2px 4px 0px hsl(0 0% 0% / 0.22), 0px 1px 2px -1px hsl(0 0% 0% / 0.18);\n  --shadow: 0px 4px 6px 0px hsl(0 0% 0% / 0.24), 0px 2px 4px -1px hsl(0 0% 0% / 0.20);\n  --shadow-md: 0px 6px 12px 0px hsl(0 0% 0% / 0.26), 0px 4px 8px -2px hsl(0 0% 0% / 0.22);\n  --shadow-lg: 0px 10px 20px 0px hsl(0 0% 0% / 0.30), 0px 6px 12px -2px hsl(0 0% 0% / 0.26);\n  --shadow-xl: 0px 16px 32px 0px hsl(0 0% 0% / 0.35), 0px 8px 16px -4px hsl(0 0% 0% / 0.30);\n  --shadow-2xl: 0px 24px 48px 0px hsl(0 0% 0% / 0.40);\n\n  /* Automatically computed borders - intensity can be controlled by the user by the --opaque-button-border-intensity setting */\n  --sidebar-primary-border: hsl(from hsl(var(--sidebar-primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --sidebar-accent-border: hsl(from hsl(var(--sidebar-accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --primary-border: hsl(from hsl(var(--primary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --secondary-border: hsl(from hsl(var(--secondary)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --muted-border: hsl(from hsl(var(--muted)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --accent-border: hsl(from hsl(var(--accent)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n  --destructive-border: hsl(from hsl(var(--destructive)) h s calc(l + var(--opaque-button-border-intensity)) / alpha);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply font-sans antialiased bg-background text-foreground;\n  }\n}\n\n/**\n * Using the elevate system.\n * Automatic contrast adjustment.\n *\n * <element className=\"hover-elevate\" />\n * <element className=\"active-elevate-2\" />\n *\n * // Using the tailwind utility when a data attribute is \"on\"\n * <element className=\"toggle-elevate data-[state=on]:toggle-elevated\" />\n * // Or manually controlling the toggle state\n * <element className=\"toggle-elevate toggle-elevated\" />\n *\n * Elevation systems have to handle many states.\n * - not-hovered, vs. hovered vs. active  (three mutually exclusive states)\n * - toggled or not\n * - focused or not (this is not handled with these utilities)\n *\n * Even without handling focused or not, this is six possible combinations that\n * need to be distinguished from eachother visually.\n */\n@layer utilities {\n\n  /* Hide ugly search cancel button in Chrome until we can style it properly */\n  input[type=\"search\"]::-webkit-search-cancel-button {\n    @apply hidden;\n  }\n\n  /* Placeholder styling for contentEditable div */\n  [contenteditable][data-placeholder]:empty::before {\n    content: attr(data-placeholder);\n    color: hsl(var(--muted-foreground));\n    pointer-events: none;\n  }\n\n  /* .no-default-hover-elevate/no-default-active-elevate is an escape hatch so consumers of\n   * buttons/badges can remove the automatic brightness adjustment on interactions\n   * and program their own. */\n  .no-default-hover-elevate {}\n\n  .no-default-active-elevate {}\n\n\n  /**\n   * Toggleable backgrounds go behind the content. Hoverable/active goes on top.\n   * This way they can stack/compound. Both will overlap the parent's borders!\n   * So borders will be automatically adjusted both on toggle, and hover/active,\n   * and they will be compounded.\n   */\n  .toggle-elevate::before,\n  .toggle-elevate-2::before {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: -1;\n    /* sits behind content but above backdrop */\n  }\n\n  .toggle-elevate.toggle-elevated::before {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.toggle-elevate::before {\n    inset: -1px;\n  }\n\n  /* Does not work on elements with overflow:hidden! */\n  .hover-elevate:not(.no-default-hover-elevate),\n  .active-elevate:not(.no-default-active-elevate),\n  .hover-elevate-2:not(.no-default-hover-elevate),\n  .active-elevate-2:not(.no-default-active-elevate) {\n    position: relative;\n    z-index: 0;\n  }\n\n  .hover-elevate:not(.no-default-hover-elevate)::after,\n  .active-elevate:not(.no-default-active-elevate)::after,\n  .hover-elevate-2:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:not(.no-default-active-elevate)::after {\n    content: \"\";\n    pointer-events: none;\n    position: absolute;\n    inset: 0px;\n    /*border-radius: inherit;   match rounded corners */\n    border-radius: inherit;\n    z-index: 999;\n    /* sits in front of content */\n  }\n\n  .hover-elevate:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-1);\n  }\n\n  .hover-elevate-2:hover:not(.no-default-hover-elevate)::after,\n  .active-elevate-2:active:not(.no-default-active-elevate)::after {\n    background-color: var(--elevate-2);\n  }\n\n  /* If there's a 1px border, adjust the inset so that it covers that parent's border */\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate-2:not(.no-hover-interaction-elevate)::after,\n  .border.active-elevate-2:not(.no-active-interaction-elevate)::after,\n  .border.hover-elevate:not(.no-hover-interaction-elevate)::after {\n    inset: -1px;\n  }\n}","size_bytes":10733},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/pages/services.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Loader2, Briefcase } from \"lucide-react\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport type { Service } from \"@shared/schema\";\nimport * as Icons from \"lucide-react\";\n\nexport default function Services() {\n  const { data: services, isLoading } = useQuery<Service[]>({\n    queryKey: [\"/api/services\"],\n  });\n\n  const getIcon = (iconName: string) => {\n    const IconComponent = (Icons as any)[iconName];\n    return IconComponent ? IconComponent : Briefcase;\n  };\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        {/* Header */}\n        <div className=\"text-center mb-16\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">\n            Services & Expertise\n          </h1>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\">\n            Professional services I offer to help bring your ideas to life\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : services && services.length > 0 ? (\n          <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-8\">\n            {services.map((service) => {\n              const Icon = getIcon(service.icon);\n              return (\n                <Card\n                  key={service.id}\n                  className=\"hover-elevate transition-transform hover:-translate-y-1\"\n                  data-testid={`service-${service.id}`}\n                >\n                  <CardHeader>\n                    <div className=\"w-12 h-12 rounded-lg bg-primary/10 flex items-center justify-center mb-4\">\n                      <Icon className=\"h-6 w-6 text-primary\" />\n                    </div>\n                    <CardTitle className=\"text-xl\">{service.title}</CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-muted-foreground leading-relaxed\">\n                      {service.description}\n                    </p>\n                  </CardContent>\n                </Card>\n              );\n            })}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <Briefcase className=\"h-16 w-16 mx-auto mb-4 text-muted-foreground/50\" />\n            <p className=\"text-muted-foreground\">No services added yet.</p>\n          </div>\n        )}\n\n        {/* CTA Section */}\n        <div className=\"mt-20 text-center bg-gradient-to-br from-primary/10 to-chart-2/10 rounded-lg p-12\">\n          <h2 className=\"text-3xl font-bold mb-4\">Interested in Working Together?</h2>\n          <p className=\"text-lg text-muted-foreground mb-8 max-w-2xl mx-auto\">\n            I'm available for freelance projects, internships, and collaboration\n            opportunities. Let's discuss how I can help with your next project.\n          </p>\n          <a href=\"/contact\">\n            <button\n              className=\"inline-flex h-10 items-center justify-center rounded-md bg-primary px-8 text-sm font-medium text-primary-foreground shadow transition-colors hover:bg-primary/90 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring disabled:pointer-events-none disabled:opacity-50\"\n              data-testid=\"button-get-started\"\n            >\n              Get Started\n            </button>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3558},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"shadcn-card rounded-xl border bg-card border-card-border text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n));\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\nexport {\n  Card,\n  CardHeader,\n  CardFooter,\n  CardTitle,\n  CardDescription,\n  CardContent,\n}\n","size_bytes":1904},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\nimport sitemap from 'vite-plugin-sitemap'; \n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    sitemap({\n      hostname: 'https://kartiksharma.site',\n      dynamicRoutes: [\n        '/',\n        '/about',\n        '/projects',\n        '/services',\n        '/achievements',\n        '/blog',\n        '/contact',\n        '/social-links'\n      ],\n      // YEH LINE UPDATE KARNI HAI (client/public ki jagah dist/public):\n      outDir: path.resolve(import.meta.dirname, \"dist/public\")\n    }),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1518},"server/storage.ts":{"content":"import {\n  type Project,\n  type InsertProject,\n  type Certificate,\n  type InsertCertificate,\n  type Skill,\n  type InsertSkill,\n  type Service,\n  type InsertService,\n  type SocialLink,\n  type InsertSocialLink,\n  type ContactMessage,\n  type InsertContactMessage,\n  type User,\n  type InsertUser,\n  type BlogPost,\n  type InsertBlogPost,\n} from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\nimport session from \"express-session\";\nimport createMemoryStore from \"memorystore\";\n\nexport interface IStorage {\n  getProjects(): Promise<Project[]>;\n  getProject(id: string): Promise<Project | undefined>;\n  createProject(project: InsertProject): Promise<Project>;\n  updateProject(id: string, project: InsertProject): Promise<Project | undefined>;\n  deleteProject(id: string): Promise<boolean>;\n\n  getCertificates(): Promise<Certificate[]>;\n  getCertificate(id: string): Promise<Certificate | undefined>;\n  createCertificate(certificate: InsertCertificate): Promise<Certificate>;\n  updateCertificate(id: string, certificate: InsertCertificate): Promise<Certificate | undefined>;\n  deleteCertificate(id: string): Promise<boolean>;\n\n  getSkills(): Promise<Skill[]>;\n  getSkill(id: string): Promise<Skill | undefined>;\n  createSkill(skill: InsertSkill): Promise<Skill>;\n  updateSkill(id: string, skill: InsertSkill): Promise<Skill | undefined>;\n  deleteSkill(id: string): Promise<boolean>;\n\n  getServices(): Promise<Service[]>;\n  getService(id: string): Promise<Service | undefined>;\n  createService(service: InsertService): Promise<Service>;\n  updateService(id: string, service: InsertService): Promise<Service | undefined>;\n  deleteService(id: string): Promise<boolean>;\n\n  getSocialLinks(): Promise<SocialLink[]>;\n  getSocialLink(id: string): Promise<SocialLink | undefined>;\n  createSocialLink(link: InsertSocialLink): Promise<SocialLink>;\n  updateSocialLink(id: string, link: InsertSocialLink): Promise<SocialLink | undefined>;\n  deleteSocialLink(id: string): Promise<boolean>;\n\n  createContactMessage(message: InsertContactMessage): Promise<ContactMessage>;\n  getContactMessages(): Promise<ContactMessage[]>;\n\n  getUser(id: number): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n\n  getBlogPosts(publishedOnly?: boolean): Promise<BlogPost[]>;\n  getBlogPost(id: string): Promise<BlogPost | undefined>;\n  getBlogPostBySlug(slug: string): Promise<BlogPost | undefined>;\n  createBlogPost(post: InsertBlogPost): Promise<BlogPost>;\n  updateBlogPost(id: string, post: InsertBlogPost): Promise<BlogPost | undefined>;\n  deleteBlogPost(id: string): Promise<boolean>;\n\n  sessionStore: session.Store;\n}\n\nconst MemoryStore = createMemoryStore(session);\n\nexport class MemStorage implements IStorage {\n  private projects: Map<string, Project>;\n  private certificates: Map<string, Certificate>;\n  private skills: Map<string, Skill>;\n  private services: Map<string, Service>;\n  private socialLinks: Map<string, SocialLink>;\n  private contactMessages: Map<string, ContactMessage>;\n  private blogPosts: Map<string, BlogPost>;\n  private users: Map<number, User>;\n  private userIdCounter: number;\n  public sessionStore: session.Store;\n\n  constructor() {\n    this.projects = new Map();\n    this.certificates = new Map();\n    this.skills = new Map();\n    this.services = new Map();\n    this.socialLinks = new Map();\n    this.contactMessages = new Map();\n    this.blogPosts = new Map();\n    this.users = new Map();\n    this.userIdCounter = 1;\n    this.sessionStore = new MemoryStore({\n      checkPeriod: 86400000,\n    });\n    this.seedData();\n  }\n\n  private seedData() {\n    const hopePawsProject = this.createProjectSync({\n      title: \"HOPE-PAWS\",\n      description: \"Developed an AI-powered platform focused on the safety of stray animals and road safety in Jaipur. Features include real-time emergency reporting, shelter locator, and community engagement tools to protect animals and improve urban safety.\",\n      technologies: [\"AI\", \"Web Design\", \"Emergency Response\", \"Community Platform\"],\n      liveUrl: \"\",\n      githubUrl: \"\",\n      imageUrl: \"\",\n      featured: \"true\",\n      order: \"0\",\n    });\n\n    const certs = [\n      { title: \"Practice Exam 1 for Azure AI Fundamentals (AI-900)\", issuer: \"Microsoft Azure\", issueDate: \"Oct 2025\", skills: [\"Microsoft Azure\", \"Azure AI Studio\", \"Artificial Intelligence (AI)\"] },\n      { title: \"Practice Exam 1 for Microsoft Azure Administrator Associate (AZ-104)\", issuer: \"LinkedIn\", issueDate: \"Oct 2025\", skills: [\"Cloud Administration\"] },\n      { title: \"Practice Exam 1 for Microsoft Power Platform Fundamentals (PL-900)\", issuer: \"LinkedIn\", issueDate: \"Oct 2025\", skills: [\"Microsoft Power Platform\"] },\n      { title: \"Practice Exam 1 for Power BI Data Analyst Associate (PL-300)\", issuer: \"LinkedIn\", issueDate: \"Oct 2025\", skills: [\"Microsoft Power BI\", \"Data Analysis\"] },\n      { title: \"Quality Management Foundations\", issuer: \"LinkedIn\", issueDate: \"Oct 2025\", skills: [\"Quality Management\"] },\n      { title: \"Systems Thinking\", issuer: \"LinkedIn\", issueDate: \"Oct 2025\", skills: [\"Systems Thinking\"] },\n      { title: \"Cloud Systems Software\", issuer: \"Georgia Institute of Technology\", issueDate: \"Sep 2025\", credentialId: \"S1OWSCV00V0P\", skills: [\"Cloud Computing\"] },\n      { title: \"Network Function Virtualization\", issuer: \"Georgia Institute of Technology\", issueDate: \"Sep 2025\", credentialId: \"QJODR3CNF2U1\", skills: [\"Networking\"] },\n      { title: \"Foundations: Data, Data, Everywhere\", issuer: \"Google\", issueDate: \"Apr 2025\", credentialId: \"945B8TUNN4KN\", skills: [\"Data Analysis\"] },\n      { title: \"Innovating with the Business Model Canvas\", issuer: \"University of Virginia\", issueDate: \"Feb 2025\", credentialId: \"6R2BRKVM442B\", skills: [\"Business Innovation\"] },\n    ];\n\n    certs.forEach(cert => this.createCertificateSync(cert));\n\n    const skills = [\n      { name: \"Software Development\", category: \"technical\", level: \"advanced\" },\n      { name: \"Web Development\", category: \"technical\", level: \"advanced\" },\n      { name: \"Python\", category: \"technical\", level: \"intermediate\" },\n      { name: \"Java\", category: \"technical\", level: \"intermediate\" },\n      { name: \"C Programming\", category: \"technical\", level: \"intermediate\" },\n      { name: \"Cloud Computing\", category: \"technical\", level: \"intermediate\" },\n      { name: \"AI Prompting\", category: \"technical\", level: \"intermediate\" },\n      { name: \"Microsoft Office\", category: \"tools\", level: \"advanced\" },\n      { name: \"Project Management\", category: \"soft\", level: \"intermediate\" },\n      { name: \"Computer Science\", category: \"technical\", level: \"advanced\" },\n    ];\n\n    skills.forEach(skill => this.createSkillSync(skill));\n\n    const services = [\n      { title: \"Web Design\", description: \"Create beautiful, responsive websites with modern design principles and user-friendly interfaces.\", icon: \"Globe\" },\n      { title: \"Logo Design\", description: \"Design unique and memorable logos that capture your brand identity and make a lasting impression.\", icon: \"Palette\" },\n      { title: \"Web Development\", description: \"Build robust, scalable web applications using modern technologies and best practices.\", icon: \"Code\" },\n      { title: \"Software Testing\", description: \"Ensure software quality through comprehensive testing and quality assurance processes.\", icon: \"CheckCircle\" },\n      { title: \"Blogging & Writing\", description: \"Create engaging content and technical articles for blogs and publications.\", icon: \"PenTool\" },\n      { title: \"Network Support\", description: \"Provide technical support for network configuration, troubleshooting, and maintenance.\", icon: \"Network\" },\n    ];\n\n    services.forEach(service => this.createServiceSync(service));\n\n    const socialLinks = [\n      { platform: \"LinkedIn\", url: \"https://linkedin.com/in/kartik-sharma06\", icon: \"Linkedin\", handle: \"@kartik-sharma06\", order: \"0\" },\n      { platform: \"GitHub\", url: \"https://github.com\", icon: \"Github\", handle: \"\", order: \"1\" },\n      { platform: \"Email\", url: \"mailto:contact@example.com\", icon: \"Mail\", handle: \"Get in touch\", order: \"2\" },\n    ];\n\n    socialLinks.forEach(link => this.createSocialLinkSync(link));\n  }\n\n  private createProjectSync(insertProject: InsertProject): Project {\n    const id = randomUUID();\n    const project: Project = {\n      ...insertProject,\n      id,\n      createdAt: new Date(),\n    };\n    this.projects.set(id, project);\n    return project;\n  }\n\n  private createCertificateSync(insertCert: InsertCertificate): Certificate {\n    const id = randomUUID();\n    const cert: Certificate = {\n      ...insertCert,\n      id,\n      credentialId: insertCert.credentialId || null,\n      credentialUrl: insertCert.credentialUrl || null,\n      createdAt: new Date(),\n    };\n    this.certificates.set(id, cert);\n    return cert;\n  }\n\n  private createSkillSync(insertSkill: InsertSkill): Skill {\n    const id = randomUUID();\n    const skill: Skill = {\n      ...insertSkill,\n      id,\n      createdAt: new Date(),\n    };\n    this.skills.set(id, skill);\n    return skill;\n  }\n\n  private createServiceSync(insertService: InsertService): Service {\n    const id = randomUUID();\n    const service: Service = {\n      ...insertService,\n      id,\n      createdAt: new Date(),\n    };\n    this.services.set(id, service);\n    return service;\n  }\n\n  private createSocialLinkSync(insertLink: InsertSocialLink): SocialLink {\n    const id = randomUUID();\n    const link: SocialLink = {\n      ...insertLink,\n      id,\n      handle: insertLink.handle || null,\n      createdAt: new Date(),\n    };\n    this.socialLinks.set(id, link);\n    return link;\n  }\n\n  async getProjects(): Promise<Project[]> {\n    return Array.from(this.projects.values()).sort((a, b) => parseInt(a.order) - parseInt(b.order));\n  }\n\n  async getProject(id: string): Promise<Project | undefined> {\n    return this.projects.get(id);\n  }\n\n  async createProject(insertProject: InsertProject): Promise<Project> {\n    return this.createProjectSync(insertProject);\n  }\n\n  async updateProject(id: string, insertProject: InsertProject): Promise<Project | undefined> {\n    const existing = this.projects.get(id);\n    if (!existing) return undefined;\n    const updated: Project = {\n      ...insertProject,\n      id,\n      createdAt: existing.createdAt,\n    };\n    this.projects.set(id, updated);\n    return updated;\n  }\n\n  async deleteProject(id: string): Promise<boolean> {\n    return this.projects.delete(id);\n  }\n\n  async getCertificates(): Promise<Certificate[]> {\n    return Array.from(this.certificates.values()).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getCertificate(id: string): Promise<Certificate | undefined> {\n    return this.certificates.get(id);\n  }\n\n  async createCertificate(insertCertificate: InsertCertificate): Promise<Certificate> {\n    return this.createCertificateSync(insertCertificate);\n  }\n\n  async updateCertificate(id: string, insertCertificate: InsertCertificate): Promise<Certificate | undefined> {\n    const existing = this.certificates.get(id);\n    if (!existing) return undefined;\n    const updated: Certificate = {\n      ...insertCertificate,\n      id,\n      credentialId: insertCertificate.credentialId || null,\n      credentialUrl: insertCertificate.credentialUrl || null,\n      createdAt: existing.createdAt,\n    };\n    this.certificates.set(id, updated);\n    return updated;\n  }\n\n  async deleteCertificate(id: string): Promise<boolean> {\n    return this.certificates.delete(id);\n  }\n\n  async getSkills(): Promise<Skill[]> {\n    return Array.from(this.skills.values());\n  }\n\n  async getSkill(id: string): Promise<Skill | undefined> {\n    return this.skills.get(id);\n  }\n\n  async createSkill(insertSkill: InsertSkill): Promise<Skill> {\n    return this.createSkillSync(insertSkill);\n  }\n\n  async updateSkill(id: string, insertSkill: InsertSkill): Promise<Skill | undefined> {\n    const existing = this.skills.get(id);\n    if (!existing) return undefined;\n    const updated: Skill = {\n      ...insertSkill,\n      id,\n      createdAt: existing.createdAt,\n    };\n    this.skills.set(id, updated);\n    return updated;\n  }\n\n  async deleteSkill(id: string): Promise<boolean> {\n    return this.skills.delete(id);\n  }\n\n  async getServices(): Promise<Service[]> {\n    return Array.from(this.services.values());\n  }\n\n  async getService(id: string): Promise<Service | undefined> {\n    return this.services.get(id);\n  }\n\n  async createService(insertService: InsertService): Promise<Service> {\n    return this.createServiceSync(insertService);\n  }\n\n  async updateService(id: string, insertService: InsertService): Promise<Service | undefined> {\n    const existing = this.services.get(id);\n    if (!existing) return undefined;\n    const updated: Service = {\n      ...insertService,\n      id,\n      createdAt: existing.createdAt,\n    };\n    this.services.set(id, updated);\n    return updated;\n  }\n\n  async deleteService(id: string): Promise<boolean> {\n    return this.services.delete(id);\n  }\n\n  async getSocialLinks(): Promise<SocialLink[]> {\n    return Array.from(this.socialLinks.values()).sort((a, b) => parseInt(a.order) - parseInt(b.order));\n  }\n\n  async getSocialLink(id: string): Promise<SocialLink | undefined> {\n    return this.socialLinks.get(id);\n  }\n\n  async createSocialLink(insertLink: InsertSocialLink): Promise<SocialLink> {\n    return this.createSocialLinkSync(insertLink);\n  }\n\n  async updateSocialLink(id: string, insertLink: InsertSocialLink): Promise<SocialLink | undefined> {\n    const existing = this.socialLinks.get(id);\n    if (!existing) return undefined;\n    const updated: SocialLink = {\n      ...insertLink,\n      id,\n      handle: insertLink.handle || null,\n      createdAt: existing.createdAt,\n    };\n    this.socialLinks.set(id, updated);\n    return updated;\n  }\n\n  async deleteSocialLink(id: string): Promise<boolean> {\n    return this.socialLinks.delete(id);\n  }\n\n  async createContactMessage(insertMessage: InsertContactMessage): Promise<ContactMessage> {\n    const id = randomUUID();\n    const message: ContactMessage = {\n      ...insertMessage,\n      id,\n      createdAt: new Date(),\n    };\n    this.contactMessages.set(id, message);\n    return message;\n  }\n\n  async getContactMessages(): Promise<ContactMessage[]> {\n    return Array.from(this.contactMessages.values()).sort((a, b) => b.createdAt.getTime() - a.createdAt.getTime());\n  }\n\n  async getUser(id: number): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(user => user.username === username);\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = this.userIdCounter++;\n    const user: User = {\n      ...insertUser,\n      id,\n      createdAt: new Date(),\n    };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async getBlogPosts(publishedOnly: boolean = false): Promise<BlogPost[]> {\n    const posts = Array.from(this.blogPosts.values());\n    if (publishedOnly) {\n      return posts.filter(post => post.published === 'true').sort((a, b) => \n        (b.publishedAt?.getTime() || 0) - (a.publishedAt?.getTime() || 0)\n      );\n    }\n    return posts.sort((a, b) => b.updatedAt.getTime() - a.updatedAt.getTime());\n  }\n\n  async getBlogPost(id: string): Promise<BlogPost | undefined> {\n    return this.blogPosts.get(id);\n  }\n\n  async getBlogPostBySlug(slug: string): Promise<BlogPost | undefined> {\n    return Array.from(this.blogPosts.values()).find(post => post.slug === slug);\n  }\n\n  async createBlogPost(insertPost: InsertBlogPost): Promise<BlogPost> {\n    const id = randomUUID();\n    const now = new Date();\n    const post: BlogPost = {\n      ...insertPost,\n      id,\n      coverImage: insertPost.coverImage || null,\n      publishedAt: insertPost.publishedAt || null,\n      createdAt: now,\n      updatedAt: now,\n    };\n    this.blogPosts.set(id, post);\n    return post;\n  }\n\n  async updateBlogPost(id: string, insertPost: InsertBlogPost): Promise<BlogPost | undefined> {\n    const existing = this.blogPosts.get(id);\n    if (!existing) return undefined;\n    const updated: BlogPost = {\n      ...insertPost,\n      id,\n      coverImage: insertPost.coverImage || null,\n      publishedAt: insertPost.publishedAt || null,\n      createdAt: existing.createdAt,\n      updatedAt: new Date(),\n    };\n    this.blogPosts.set(id, updated);\n    return updated;\n  }\n\n  async deleteBlogPost(id: string): Promise<boolean> {\n    return this.blogPosts.delete(id);\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":16586},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, serial } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\n// Projects table\nexport const projects = pgTable(\"projects\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  technologies: text(\"technologies\").array().notNull(),\n  liveUrl: text(\"live_url\"),\n  githubUrl: text(\"github_url\"),\n  imageUrl: text(\"image_url\"),\n  featured: text(\"featured\").notNull().default('false'),\n  order: text(\"order\").notNull().default('0'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertProjectSchema = createInsertSchema(projects).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertProject = z.infer<typeof insertProjectSchema>;\nexport type Project = typeof projects.$inferSelect;\n\n// Certificates table\nexport const certificates = pgTable(\"certificates\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  issuer: text(\"issuer\").notNull(),\n  issueDate: text(\"issue_date\").notNull(),\n  credentialId: text(\"credential_id\"),\n  credentialUrl: text(\"credential_url\"),\n  skills: text(\"skills\").array().notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertCertificateSchema = createInsertSchema(certificates).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertCertificate = z.infer<typeof insertCertificateSchema>;\nexport type Certificate = typeof certificates.$inferSelect;\n\n// Skills table\nexport const skills = pgTable(\"skills\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  category: text(\"category\").notNull(),\n  level: text(\"level\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertSkillSchema = createInsertSchema(skills).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSkill = z.infer<typeof insertSkillSchema>;\nexport type Skill = typeof skills.$inferSelect;\n\n// Services table\nexport const services = pgTable(\"services\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  description: text(\"description\").notNull(),\n  icon: text(\"icon\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertServiceSchema = createInsertSchema(services).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertService = z.infer<typeof insertServiceSchema>;\nexport type Service = typeof services.$inferSelect;\n\n// Social Links table\nexport const socialLinks = pgTable(\"social_links\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  platform: text(\"platform\").notNull(),\n  url: text(\"url\").notNull(),\n  icon: text(\"icon\").notNull(),\n  handle: text(\"handle\"),\n  order: text(\"order\").notNull().default('0'),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertSocialLinkSchema = createInsertSchema(socialLinks).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertSocialLink = z.infer<typeof insertSocialLinkSchema>;\nexport type SocialLink = typeof socialLinks.$inferSelect;\n\n// Users table\nexport const users = pgTable(\"users\", {\n  id: serial(\"id\").primaryKey(),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertUserSchema = createInsertSchema(users).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\n\n// Contact Messages table\nexport const contactMessages = pgTable(\"contact_messages\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  message: text(\"message\").notNull(),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n});\n\nexport const insertContactMessageSchema = createInsertSchema(contactMessages).omit({\n  id: true,\n  createdAt: true,\n});\n\nexport type InsertContactMessage = z.infer<typeof insertContactMessageSchema>;\nexport type ContactMessage = typeof contactMessages.$inferSelect;\n\n// Blog Posts table\nexport const blogPosts = pgTable(\"blog_posts\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  title: text(\"title\").notNull(),\n  slug: text(\"slug\").notNull().unique(),\n  excerpt: text(\"excerpt\").notNull(),\n  content: text(\"content\").notNull(),\n  coverImage: text(\"cover_image\"),\n  tags: text(\"tags\").array().notNull(),\n  published: text(\"published\").notNull().default('false'),\n  publishedAt: timestamp(\"published_at\"),\n  createdAt: timestamp(\"created_at\").notNull().default(sql`now()`),\n  updatedAt: timestamp(\"updated_at\").notNull().default(sql`now()`),\n});\n\nexport const insertBlogPostSchema = createInsertSchema(blogPosts).omit({\n  id: true,\n  createdAt: true,\n  updatedAt: true,\n});\n\nexport type InsertBlogPost = z.infer<typeof insertBlogPostSchema>;\nexport type BlogPost = typeof blogPosts.$inferSelect;\n","size_bytes":5248},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-9 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5741},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/pages/blog.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Loader2, Calendar, ArrowRight } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function Blog() {\n  const { data: blogPosts, isLoading } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog-posts\", { published: \"true\" }],\n    queryFn: async () => {\n      const response = await fetch(\"/api/blog-posts?published=true\");\n      if (!response.ok) throw new Error(\"Failed to fetch blog posts\");\n      return response.json();\n    },\n  });\n\n  return (\n    <div className=\"min-h-screen py-20 bg-gradient-to-br from-primary/5 via-background to-chart-2/5\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-6xl\">\n        <div className=\"text-center mb-12\">\n          <h1 className=\"text-4xl md:text-5xl font-bold mb-4\">Blog</h1>\n          <p className=\"text-lg text-muted-foreground max-w-2xl mx-auto\">\n            Thoughts, tutorials, and insights about software development, technology, and learning\n          </p>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : blogPosts && blogPosts.length > 0 ? (\n          <div className=\"grid gap-8 md:grid-cols-2 lg:grid-cols-3\">\n            {blogPosts.map((post) => (\n              <Link key={post.id} href={`/blog/${post.slug}`}>\n                <Card className=\"h-full hover-elevate active-elevate-2 transition-all hover:-translate-y-1 cursor-pointer\">\n                  {post.coverImage && (\n                    <div className=\"aspect-video w-full overflow-hidden rounded-t-lg\">\n                      <img\n                        src={post.coverImage}\n                        alt={post.title}\n                        className=\"w-full h-full object-cover\"\n                      />\n                    </div>\n                  )}\n                  <CardContent className=\"p-6\">\n                    <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-3\">\n                      <Calendar className=\"h-4 w-4\" />\n                      <time>\n                        {post.publishedAt\n                          ? new Date(post.publishedAt).toLocaleDateString('en-US', {\n                              month: 'short',\n                              day: 'numeric',\n                              year: 'numeric',\n                            })\n                          : 'Draft'}\n                      </time>\n                    </div>\n\n                    <h2 className=\"text-xl font-bold mb-3 line-clamp-2\">\n                      {post.title}\n                    </h2>\n\n                    <p className=\"text-muted-foreground mb-4 line-clamp-3\">\n                      {post.excerpt}\n                    </p>\n\n                    <div className=\"flex flex-wrap gap-2 mb-4\">\n                      {post.tags.slice(0, 3).map((tag, index) => (\n                        <Badge key={index} variant=\"secondary\" className=\"text-xs\">\n                          {tag}\n                        </Badge>\n                      ))}\n                    </div>\n\n                    <div className=\"flex items-center gap-2 text-primary font-medium\">\n                      Read more <ArrowRight className=\"h-4 w-4\" />\n                    </div>\n                  </CardContent>\n                </Card>\n              </Link>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground text-lg\">\n              No blog posts yet. Check back soon!\n            </p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":3827},"client/src/pages/blog-post.tsx":{"content":"import { useQuery } from \"@tanstack/react-query\";\nimport { useRoute } from \"wouter\";\nimport { Card, CardContent } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Loader2, Calendar, ArrowLeft } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport type { BlogPost } from \"@shared/schema\";\n\nexport default function BlogPostPage() {\n  const [, params] = useRoute(\"/blog/:slug\");\n  const slug = params?.slug;\n\n  const { data: blogPost, isLoading, error } = useQuery<BlogPost>({\n    queryKey: [\"/api/blog-posts/slug\", slug],\n    queryFn: async () => {\n      const response = await fetch(`/api/blog-posts/slug/${slug}`);\n      if (!response.ok) throw new Error(\"Failed to fetch blog post\");\n      return response.json();\n    },\n    enabled: !!slug,\n  });\n\n  if (isLoading) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n      </div>\n    );\n  }\n\n  if (error || !blogPost) {\n    return (\n      <div className=\"min-h-screen flex items-center justify-center\">\n        <div className=\"text-center\">\n          <h1 className=\"text-4xl font-bold mb-4\">Post Not Found</h1>\n          <p className=\"text-muted-foreground mb-8\">\n            The blog post you're looking for doesn't exist.\n          </p>\n          <Link href=\"/blog\">\n            <Button>\n              <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Blog\n            </Button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n\n  return (\n    <div className=\"min-h-screen py-20 bg-gradient-to-br from-primary/5 via-background to-chart-2/5\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-4xl\">\n        <Link href=\"/blog\">\n          <Button variant=\"ghost\" className=\"mb-8\">\n            <ArrowLeft className=\"mr-2 h-4 w-4\" /> Back to Blog\n          </Button>\n        </Link>\n\n        <Card>\n          {blogPost.coverImage && (\n            <div className=\"aspect-video w-full overflow-hidden rounded-t-lg\">\n              <img\n                src={blogPost.coverImage}\n                alt={blogPost.title}\n                className=\"w-full h-full object-cover\"\n              />\n            </div>\n          )}\n\n          <CardContent className=\"p-8\">\n            <div className=\"flex items-center gap-2 text-sm text-muted-foreground mb-4\">\n              <Calendar className=\"h-4 w-4\" />\n              <time>\n                {blogPost.publishedAt\n                  ? new Date(blogPost.publishedAt).toLocaleDateString('en-US', {\n                      month: 'long',\n                      day: 'numeric',\n                      year: 'numeric',\n                    })\n                  : 'Draft'}\n              </time>\n            </div>\n\n            <h1 className=\"text-4xl md:text-5xl font-bold mb-6\">\n              {blogPost.title}\n            </h1>\n\n            <div className=\"flex flex-wrap gap-2 mb-8\">\n              {blogPost.tags.map((tag, index) => (\n                <Badge key={index} variant=\"secondary\">\n                  {tag}\n                </Badge>\n              ))}\n            </div>\n\n            <div className=\"prose prose-lg dark:prose-invert max-w-none\">\n              <p className=\"text-xl text-muted-foreground mb-8 font-medium\">\n                {blogPost.excerpt}\n              </p>\n              <div className=\"whitespace-pre-wrap\">{blogPost.content}</div>\n            </div>\n          </CardContent>\n        </Card>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3531},"client/src/pages/admin-blog.tsx":{"content":"import { useState } from \"react\";\nimport { useQuery, useMutation } from \"@tanstack/react-query\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Label } from \"@/components/ui/label\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Badge } from \"@/components/ui/badge\";\nimport {\n  Dialog,\n  DialogContent,\n  DialogHeader,\n  DialogTitle,\n  DialogTrigger,\n} from \"@/components/ui/dialog\";\nimport {\n  AlertDialog,\n  AlertDialogAction,\n  AlertDialogCancel,\n  AlertDialogContent,\n  AlertDialogDescription,\n  AlertDialogFooter,\n  AlertDialogHeader,\n  AlertDialogTitle,\n  AlertDialogTrigger,\n} from \"@/components/ui/alert-dialog\";\nimport { Switch } from \"@/components/ui/switch\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { useForm } from \"react-hook-form\";\nimport { zodResolver } from \"@hookform/resolvers/zod\";\nimport { insertBlogPostSchema, type BlogPost, type InsertBlogPost } from \"@shared/schema\";\nimport { Plus, Pencil, Trash2, Calendar, Loader2 } from \"lucide-react\";\nimport { queryClient, apiRequest } from \"@/lib/queryClient\";\n\nexport default function AdminBlog() {\n  const { toast } = useToast();\n  const [dialogOpen, setDialogOpen] = useState(false);\n  const [editingPost, setEditingPost] = useState<BlogPost | null>(null);\n\n  const { data: blogPosts, isLoading } = useQuery<BlogPost[]>({\n    queryKey: [\"/api/blog-posts\"],\n    queryFn: async () => {\n      const response = await fetch(\"/api/blog-posts\");\n      if (!response.ok) throw new Error(\"Failed to fetch blog posts\");\n      return response.json();\n    },\n  });\n\n  const form = useForm<InsertBlogPost>({\n    resolver: zodResolver(insertBlogPostSchema),\n    defaultValues: {\n      title: \"\",\n      slug: \"\",\n      excerpt: \"\",\n      content: \"\",\n      coverImage: \"\",\n      tags: [],\n      published: \"false\",\n      publishedAt: null,\n    },\n  });\n\n  const createMutation = useMutation({\n    mutationFn: async (data: InsertBlogPost) => {\n      return await apiRequest(\"POST\", \"/api/blog-posts\", data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog-posts\"] });\n      toast({ title: \"Blog post created successfully\" });\n      setDialogOpen(false);\n      form.reset();\n    },\n  });\n\n  const updateMutation = useMutation({\n    mutationFn: async ({ id, data }: { id: string; data: InsertBlogPost }) => {\n      return await apiRequest(\"PATCH\", `/api/blog-posts/${id}`, data);\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog-posts\"] });\n      toast({ title: \"Blog post updated successfully\" });\n      setDialogOpen(false);\n      setEditingPost(null);\n      form.reset();\n    },\n  });\n\n  const deleteMutation = useMutation({\n    mutationFn: async (id: string) => {\n      return await apiRequest(\"DELETE\", `/api/blog-posts/${id}`, {});\n    },\n    onSuccess: () => {\n      queryClient.invalidateQueries({ queryKey: [\"/api/blog-posts\"] });\n      toast({ title: \"Blog post deleted successfully\" });\n    },\n  });\n\n  const handleEdit = (post: BlogPost) => {\n    setEditingPost(post);\n    form.reset({\n      title: post.title,\n      slug: post.slug,\n      excerpt: post.excerpt,\n      content: post.content,\n      coverImage: post.coverImage || \"\",\n      tags: post.tags,\n      published: post.published,\n      publishedAt: post.publishedAt,\n    });\n    setDialogOpen(true);\n  };\n\n  const onSubmit = (data: InsertBlogPost) => {\n    const formData = {\n      ...data,\n      coverImage: data.coverImage || null,\n      publishedAt: data.published === 'true' && !data.publishedAt ? new Date() : data.publishedAt,\n    };\n\n    if (editingPost) {\n      updateMutation.mutate({ id: editingPost.id, data: formData });\n    } else {\n      createMutation.mutate(formData);\n    }\n  };\n\n  const generateSlug = (title: string) => {\n    return title\n      .toLowerCase()\n      .replace(/[^a-z0-9]+/g, '-')\n      .replace(/(^-|-$)/g, '');\n  };\n\n  const handleTitleBlur = () => {\n    const title = form.getValues('title');\n    const currentSlug = form.getValues('slug');\n    if (title && !currentSlug) {\n      form.setValue('slug', generateSlug(title));\n    }\n  };\n\n  const sortedPosts = blogPosts?.sort(\n    (a, b) => new Date(b.updatedAt).getTime() - new Date(a.updatedAt).getTime()\n  );\n\n  return (\n    <div className=\"min-h-screen py-20\">\n      <div className=\"container mx-auto px-4 lg:px-8 max-w-7xl\">\n        <div className=\"flex justify-between items-center mb-8\">\n          <div>\n            <h1 className=\"text-3xl font-bold\">Manage Blog Posts</h1>\n            <p className=\"text-muted-foreground\">Create and manage your blog content</p>\n          </div>\n          <Dialog open={dialogOpen} onOpenChange={setDialogOpen}>\n            <DialogTrigger asChild>\n              <Button\n                onClick={() => {\n                  setEditingPost(null);\n                  form.reset();\n                }}\n              >\n                <Plus className=\"mr-2 h-4 w-4\" />\n                New Post\n              </Button>\n            </DialogTrigger>\n            <DialogContent className=\"max-w-3xl max-h-[90vh] overflow-y-auto\">\n              <DialogHeader>\n                <DialogTitle>\n                  {editingPost ? \"Edit Blog Post\" : \"Create Blog Post\"}\n                </DialogTitle>\n              </DialogHeader>\n              <form onSubmit={form.handleSubmit(onSubmit)} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"title\">Title</Label>\n                  <Input\n                    id=\"title\"\n                    {...form.register(\"title\")}\n                    onBlur={handleTitleBlur}\n                    placeholder=\"Enter post title\"\n                  />\n                  {form.formState.errors.title && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.title.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"slug\">Slug (URL)</Label>\n                  <Input\n                    id=\"slug\"\n                    {...form.register(\"slug\")}\n                    placeholder=\"post-url-slug\"\n                  />\n                  {form.formState.errors.slug && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.slug.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"excerpt\">Excerpt</Label>\n                  <Textarea\n                    id=\"excerpt\"\n                    {...form.register(\"excerpt\")}\n                    placeholder=\"Brief description of the post\"\n                    rows={3}\n                  />\n                  {form.formState.errors.excerpt && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.excerpt.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"content\">Content</Label>\n                  <Textarea\n                    id=\"content\"\n                    {...form.register(\"content\")}\n                    placeholder=\"Write your post content here...\"\n                    rows={12}\n                  />\n                  {form.formState.errors.content && (\n                    <p className=\"text-sm text-red-500 mt-1\">\n                      {form.formState.errors.content.message}\n                    </p>\n                  )}\n                </div>\n\n                <div>\n                  <Label htmlFor=\"coverImage\">Cover Image URL</Label>\n                  <Input\n                    id=\"coverImage\"\n                    {...form.register(\"coverImage\")}\n                    placeholder=\"https://example.com/image.jpg (optional)\"\n                  />\n                </div>\n\n                <div>\n                  <Label htmlFor=\"tags\">Tags (comma-separated)</Label>\n                  <Input\n                    id=\"tags\"\n                    placeholder=\"react, javascript, tutorial\"\n                    defaultValue={form.getValues(\"tags\")?.join(\", \")}\n                    onChange={(e) => {\n                      const tags = e.target.value.split(\",\").map(tag => tag.trim()).filter(Boolean);\n                      form.setValue(\"tags\", tags);\n                    }}\n                  />\n                </div>\n\n                <div className=\"flex items-center space-x-2\">\n                  <Switch\n                    id=\"published\"\n                    checked={form.watch(\"published\") === \"true\"}\n                    onCheckedChange={(checked) => {\n                      form.setValue(\"published\", checked ? \"true\" : \"false\");\n                      if (checked && !editingPost) {\n                        form.setValue(\"publishedAt\", new Date());\n                      }\n                    }}\n                  />\n                  <Label htmlFor=\"published\">Publish post</Label>\n                </div>\n\n                <div className=\"flex gap-2 pt-4\">\n                  <Button type=\"submit\" disabled={createMutation.isPending || updateMutation.isPending}>\n                    {createMutation.isPending || updateMutation.isPending ? (\n                      <>\n                        <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />\n                        Saving...\n                      </>\n                    ) : editingPost ? (\n                      \"Update Post\"\n                    ) : (\n                      \"Create Post\"\n                    )}\n                  </Button>\n                  <Button\n                    type=\"button\"\n                    variant=\"outline\"\n                    onClick={() => {\n                      setDialogOpen(false);\n                      setEditingPost(null);\n                      form.reset();\n                    }}\n                  >\n                    Cancel\n                  </Button>\n                </div>\n              </form>\n            </DialogContent>\n          </Dialog>\n        </div>\n\n        {isLoading ? (\n          <div className=\"flex justify-center items-center py-20\">\n            <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\n          </div>\n        ) : sortedPosts && sortedPosts.length > 0 ? (\n          <div className=\"grid gap-6\">\n            {sortedPosts.map((post) => (\n              <Card key={post.id}>\n                <CardHeader>\n                  <div className=\"flex items-start justify-between\">\n                    <div className=\"flex-1\">\n                      <div className=\"flex items-center gap-2 mb-2\">\n                        <CardTitle className=\"text-xl\">{post.title}</CardTitle>\n                        {post.published === \"true\" ? (\n                          <Badge variant=\"default\">Published</Badge>\n                        ) : (\n                          <Badge variant=\"secondary\">Draft</Badge>\n                        )}\n                      </div>\n                      <div className=\"flex items-center gap-2 text-sm text-muted-foreground\">\n                        <Calendar className=\"h-4 w-4\" />\n                        <span>\n                          {post.publishedAt\n                            ? new Date(post.publishedAt).toLocaleDateString()\n                            : `Updated ${new Date(post.updatedAt).toLocaleDateString()}`}\n                        </span>\n                      </div>\n                    </div>\n                    <div className=\"flex gap-2\">\n                      <Button\n                        variant=\"outline\"\n                        size=\"icon\"\n                        onClick={() => handleEdit(post)}\n                      >\n                        <Pencil className=\"h-4 w-4\" />\n                      </Button>\n                      <AlertDialog>\n                        <AlertDialogTrigger asChild>\n                          <Button variant=\"outline\" size=\"icon\">\n                            <Trash2 className=\"h-4 w-4\" />\n                          </Button>\n                        </AlertDialogTrigger>\n                        <AlertDialogContent>\n                          <AlertDialogHeader>\n                            <AlertDialogTitle>Delete blog post?</AlertDialogTitle>\n                            <AlertDialogDescription>\n                              This action cannot be undone. This will permanently delete\n                              the blog post.\n                            </AlertDialogDescription>\n                          </AlertDialogHeader>\n                          <AlertDialogFooter>\n                            <AlertDialogCancel>Cancel</AlertDialogCancel>\n                            <AlertDialogAction\n                              onClick={() => deleteMutation.mutate(post.id)}\n                            >\n                              Delete\n                            </AlertDialogAction>\n                          </AlertDialogFooter>\n                        </AlertDialogContent>\n                      </AlertDialog>\n                    </div>\n                  </div>\n                </CardHeader>\n                <CardContent>\n                  <p className=\"text-muted-foreground mb-4\">{post.excerpt}</p>\n                  <div className=\"flex flex-wrap gap-2\">\n                    {post.tags.map((tag, index) => (\n                      <Badge key={index} variant=\"secondary\">\n                        {tag}\n                      </Badge>\n                    ))}\n                  </div>\n                </CardContent>\n              </Card>\n            ))}\n          </div>\n        ) : (\n          <div className=\"text-center py-20\">\n            <p className=\"text-muted-foreground\">No blog posts yet. Create your first one!</p>\n          </div>\n        )}\n      </div>\n    </div>\n  );\n}\n","size_bytes":13883}},"version":2}